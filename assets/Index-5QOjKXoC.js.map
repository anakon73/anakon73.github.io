{"version":3,"file":"Index-5QOjKXoC.js","sources":["../../src/shared/ui/icons/IconSave.vue","../../src/shared/api/stores/tasks.ts","../../src/shared/api/tasks/useTasks.ts","../../src/shared/ui/icons/IconDeleteForever.vue","../../src/shared/api/useSchedule.ts","../../src/shared/ui/schedule/TaskBar.vue","../../src/shared/ui/icons/IconUndo.vue","../../src/shared/types/enums/tasks/GlobalTasks.ts","../../src/shared/ui/schedule/Schedule.vue","../../src/pages/schedule/Index.vue"],"sourcesContent":["<template>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M17,7V3H7V7H17M14,17A3,3 0 0,0 17,14A3,3 0 0,0 14,11A3,3 0 0,0 11,14A3,3 0 0,0 14,17M19,1L23,5V17A2,2 0 0,1 21,19H7C5.89,19 5,18.1 5,17V3A2,2 0 0,1 7,1H19M1,7H3V21H17V23H3A2,2 0 0,1 1,21V7Z\" />\n  </svg>\n</template>\n","import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IOperationalBase } from '@/shared/types/operational-bases/IOperationalBase'\nimport type { ITask } from '@/shared/types/tasks/ITask'\n\nexport const useTasksStore = defineStore('tasks', () => {\n  const taskBasesIndex = ref<IOperationalBase[]>([])\n\n  function setTaskBaseIndex(i: IOperationalBase[]) {\n    taskBasesIndex.value = i\n  }\n\n  function addTaskBaseToIndex(i: IOperationalBase) {\n    taskBasesIndex.value.push(i)\n  }\n\n  function updateTaskBasesInIndex(i: IOperationalBase) {\n    const index = taskBasesIndex.value.findIndex((taskBase) => taskBase.id === i.id)\n    taskBasesIndex.value[index] = i\n  }\n\n  function resetTaskBasesStore() {\n    taskBasesIndex.value = []\n  }\n\n  const tasksIndex = ref<ITask[]>([])\n\n  function setTasksIndex(i: ITask[]) {\n    tasksIndex.value = i\n  }\n\n  function addTaskToIndex(i: ITask) {\n    tasksIndex.value.push(i)\n  }\n\n  function updateTasksInIndex(i: ITask) {\n    const index = tasksIndex.value.findIndex((task) => task.id === i.id)\n    tasksIndex.value[index] = i\n  }\n\n  function resetTasksStore() {\n    tasksIndex.value = []\n  }\n\n  return {\n    taskBasesIndex,\n    setTaskBaseIndex,\n    addTaskBaseToIndex,\n    updateTaskBasesInIndex,\n    resetTaskBasesStore,\n    tasksIndex,\n    setTasksIndex,\n    addTaskToIndex,\n    updateTasksInIndex,\n    resetTasksStore,\n  }\n})\n","import { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useTasksStore } from '@/shared/api/stores/tasks'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { IOperationalBase } from '@/shared/types/operational-bases/IOperationalBase'\n\nexport function useTasks() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n  } = useUi()\n\n  const {\n    resetTaskBasesStore,\n    resetTasksStore,\n  } = useTasksStore()\n\n  const taskActions = {\n    getTasksByOperationalBase: {\n      id: 'getTasksByOperationalBase',\n      successMessage: 'Task retrieved successfully.',\n      errorMessage: 'Failed to retrieve task.',\n    } as IAction,\n  }\n  const apiGetTasksByDepartmentAndOperationalBase = async (\n    department: IDepartment,\n    operationalBase: IOperationalBase,\n  ) => {\n    resetActionsInError()\n    addToActionsInProgress(taskActions.getTasksByOperationalBase)\n\n    try {\n      const rsp = await apiClient.get('/api/tasks/get-by-department-and-operational-base', {\n        params: {\n          operationalBaseId: operationalBase.id,\n          departmentId: department.id,\n        },\n      })\n      removeFromActionsInProgress(taskActions.getTasksByOperationalBase)\n      return rsp.data.tasks\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(taskActions.getTasksByOperationalBase, e)\n    }\n  }\n\n  return {\n    taskActions,\n    apiGetTasksByDepartmentAndOperationalBase,\n    resetTasksStore,\n    resetTaskBasesStore,\n  }\n}\n","<template>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M14.12,10.47L12,12.59L9.87,10.47L8.46,11.88L10.59,14L8.47,16.12L9.88,17.53L12,15.41L14.12,17.53L15.53,16.12L13.41,14L15.53,11.88L14.12,10.47M15.5,4L14.5,3H9.5L8.5,4H5V6H19V4H15.5M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19M8,9H16V19H8V9Z\" />\n  </svg>\n</template>\n","import { storeToRefs } from 'pinia'\nimport { useUserStore } from '@/shared/api/stores/user'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport type { ISchedule } from '@/shared/types/schedule/ISchedule'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\n\nexport function useSchedule() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    processActionSuccess,\n    resetActionsInError,\n    resetActionsInSuccess,\n  } = useUi()\n  const { user } = storeToRefs(useUserStore())\n\n  const scheduleActions = {\n    getScheduleByDateAndDepartment: {\n      id: 'getScheduleByDateAndDepartment',\n      successMessage: 'Schedule retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the schedule.',\n    } as IAction,\n    getTasksByLocation: {\n      id: 'getTasksByLocation',\n      successMessage: 'Tasks retrieved successfully.',\n      errorMessage: 'There was a problem retrieving tasks.',\n    } as IAction,\n    saveSchedule: {\n      id: 'saveSchedule',\n      successMessage: 'Schedule saved successfully.',\n      errorMessage: 'There was a problem saving the schedule.',\n    } as IAction,\n  }\n\n  const getScheduleByDateAndDepartment = async (\n    date: string,\n    department: IDepartment,\n  ) => {\n    resetActionsInError()\n    addToActionsInProgress(scheduleActions.getScheduleByDateAndDepartment)\n\n    try {\n      const departmentId = department.id\n      const rsp = await apiClient.get('/api/schedule', {\n        params: {\n          date,\n          departmentId,\n        },\n      })\n\n      removeFromActionsInProgress(scheduleActions.getScheduleByDateAndDepartment)\n      return rsp.data\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(scheduleActions.getScheduleByDateAndDepartment, e)\n    }\n  }\n\n  const saveSchedule = async (schedule: ISchedule) => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(scheduleActions.saveSchedule)\n\n    try {\n      await apiClient.post('/api/schedule', schedule)\n      removeFromActionsInProgress(scheduleActions.saveSchedule)\n      processActionSuccess(scheduleActions.saveSchedule)\n      setTimeout(() => {\n        resetActionsInSuccess()\n      }, 3000)\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(scheduleActions.saveSchedule, e)\n    }\n  }\n\n  return {\n    user,\n    getScheduleByDateAndDepartment,\n    scheduleActions,\n    saveSchedule,\n  }\n}\n","<script setup lang=\"ts\">\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport IconDeleteForever from '@/shared/ui/icons/IconDeleteForever.vue'\nimport { useSchedule } from '@/shared/api/useSchedule'\nimport { useTasks } from '@/shared/api/tasks/useTasks'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport type { ITask } from '@/shared/types/tasks/ITask'\nimport type { IDataFilters } from '@/shared/types/inputs/IDataFilters'\n\nconst { actionIsInProgress } = useUi()\nconst { scheduleActions } = useSchedule()\nconst { taskActions } = useTasks()\n\ndefineProps<{\n  tasks: ITask[]\n  filterState: IDataFilters\n}>()\n\nconst currentlySelectedTask = defineModel<ITask | null>('currentlySelectedTask')\n\nconst selectTask = (task: ITask | null) => {\n  currentlySelectedTask.value = task\n}\n</script>\n\n<template>\n  <div class=\"mb-4 flex w-full flex-wrap items-start justify-start gap-1.5 rounded border border-gray-200 bg-white p-1.5\">\n    <button\n      v-if=\"tasks.length\"\n      class=\"flex items-center rounded border border-gray-100 bg-white px-2 py-1 text-xs ring-gray-200\"\n      :class=\"{ ring: !currentlySelectedTask && !actionIsInProgress(scheduleActions.getScheduleByDateAndDepartment) }\"\n      @click=\"selectTask(null)\"\n    >\n      <IconDeleteForever class=\"mr-1 h-4 w-4 fill-gray-500\" />\n      Eraser\n    </button>\n\n    <button\n      v-for=\"task in tasks\"\n      :key=\"task.id\"\n      class=\"relative flex items-center justify-center rounded border px-2 py-1 text-xs\"\n      :class=\"[\n        { ring: currentlySelectedTask && currentlySelectedTask.id === task.id },\n        task.class,\n      ]\"\n      @click=\"selectTask(task)\"\n    >\n      <span class=\"flex flex-col items-start\">\n        <span\n          v-if=\"filterState.selectedOperationalBase?.id === 0\"\n          class=\"block pt-0.5 font-medium leading-none\"\n          style=\"font-size: 9px\"\n        >\n          {{ task.operationalBase.name }}\n        </span>\n        <span class=\"flex\">\n          {{ task.name }}\n          <img\n            v-if=\"task.iconUrl\"\n            :src=\"task.iconUrl\"\n            class=\"ml-1\"\n            alt=\"Task icon\"\n          >\n        </span>\n      </span>\n    </button>\n\n    <Transition>\n      <div\n        v-if=\"actionIsInProgress(scheduleActions.getScheduleByDateAndDepartment) || actionIsInProgress(taskActions.getTasksByOperationalBase)\"\n        class=\"absolute inset-0 z-50 flex min-h-[75px] items-center justify-center rounded bg-gray-100\"\n      >\n        <ProgressSpinner class=\"h-4 w-4 text-gray-500\" />\n      </div>\n    </Transition>\n  </div>\n</template>\n","<template>\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M12.5,8C9.85,8 7.45,9 5.6,10.6L2,7V16H11L7.38,12.38C8.77,11.22 10.54,10.5 12.5,10.5C16.04,10.5 19.05,12.81 20.1,16L22.47,15.22C21.08,11.03 17.15,8 12.5,8Z\" />\n  </svg>\n</template>\n","export enum GlobalTasks {\n  HOLIDAY_REQUESTED = 'holiday-requested',\n}\n","<script setup lang=\"ts\">\nimport { computed, onMounted, ref, watch } from 'vue'\nimport { useRouter } from 'vue-router/auto'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport IconPhone from '@/shared/ui/icons/IconPhone.vue'\nimport IconAccount from '@/shared/ui/icons/IconAccount.vue'\nimport type {\n  ISchedule,\n  IStaffSchedule,\n  IStaffScheduleDay,\n} from '@/shared/types/schedule/ISchedule'\nimport { useSchedule } from '@/shared/api/useSchedule'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { ITask } from '@/shared/types/tasks/ITask'\nimport IconUndo from '@/shared/ui/icons/IconUndo.vue'\nimport IconSave from '@/shared/ui/icons/IconSave.vue'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport IconTickMarkCircle from '@/shared/ui/icons/IconTickMarkCircle.vue'\nimport type { IDataFilters } from '@/shared/types/inputs/IDataFilters'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\nimport { GlobalTasks } from '@/shared/types/enums/tasks/GlobalTasks'\n\nimport { Routes } from '@/shared/lib/router'\nimport { useAuth } from '@/shared/api/useAuth'\n\nconst { actionIsInProgress, getActionSuccessMessage, actionIsInSuccess } = useUi()\nconst { userHasPermissionInDepartment, user } = useAuth()\ninterface IProps {\n  filterState: IDataFilters\n  tasks: ITask[]\n  currentlySelectedTask: ITask | null\n}\nconst {\n  filterState,\n  tasks,\n  currentlySelectedTask,\n} = defineProps<IProps>()\n\nconst router = useRouter()\nconst {\n  getScheduleByDateAndDepartment,\n  saveSchedule,\n  scheduleActions,\n} = useSchedule()\n\nconst userCanEditSchedule = computed(() => {\n  if (filterState.selectedDepartment === null) {\n    return false\n  }\n  return userHasPermissionInDepartment(\n    AppPermissions.EDIT_SCHEDULE,\n    filterState.selectedDepartment,\n  )\n})\n\nconst userCanRequestHoliday = (\n  authUserId: number,\n  requestUserId: number,\n  selectedTask: ITask | null,\n) => {\n  const requestIsForSelf = requestUserId === authUserId\n  const taskSelectedIsHolidayRequest = selectedTask?.slug === GlobalTasks.HOLIDAY_REQUESTED\n\n  return requestIsForSelf && taskSelectedIsHolidayRequest\n}\n\nconst changesMade = ref(false)\nconst staffSchedule = ref<ISchedule>({\n  daysInMonth: [],\n  staffSchedules: [],\n})\nconst originalSchedule = ref<ISchedule>({\n  daysInMonth: [],\n  staffSchedules: [],\n})\n\n/**\n * The logic here follows these rules to determine which staff schedules\n * to display. We always show at least the schedule for the currently\n * authenticated user, otherwise these rules are listed in order of priority\n * -the first one that matches is the one that applies:\n *\n * - If the user has permission to edit the schedule for this ops base,\n *   show all staff schedules.\n * - If this ops base has private staff schedules, only show the user's\n *   schedule.\n * - If this ops base has public staff schedules, show all staff schedules.\n *\n * - Nick 08/02/2024\n */\nconst filteredStaffSchedule = computed<IStaffSchedule[]>(() => {\n  return staffSchedule.value.staffSchedules.filter((staff) => {\n    return (\n      staff.operationalBases.some((base) => base.id === filterState.selectedOperationalBase?.id)\n        || filterState.selectedOperationalBase?.id === 0\n    )\n      && (\n        staff.roles.some(\n          (role) => role.id === filterState.selectedRole?.id,\n        )\n        || filterState.selectedRole?.id === 0\n      )\n  }).filter(\n    (staff) => {\n      return staff.id === user.value?.id\n        || userCanEditSchedule.value\n        || !filterState.selectedOperationalBase?.privateStaffSchedules\n    })\n})\n\nconst checkTaskConditions = (task: ITask, condition: keyof ITask): boolean => {\n  return task && !!task[condition]\n}\n\nconst createStaffOnConditionComputedProp = (condition: keyof ITask) => {\n  return computed(() => {\n    const total: number[] = []\n\n    staffSchedule.value.daysInMonth.forEach(\n      (day) => {\n        let allStaffOnShiftTotal = 0\n        filteredStaffSchedule.value.forEach(\n          (staff) => {\n            staff.schedule.forEach(\n              (schedule) => {\n                const taskIsntFiltered = filterState.selectedOperationalBase?.id === 0\n                  || (\n                    schedule.task\n                    && schedule.task.operationalBase.id === filterState.selectedOperationalBase?.id\n                  )\n\n                if (\n                  schedule.task\n                  && checkTaskConditions(schedule.task, condition)\n                  && day.date === schedule.date\n                  && schedule.task.isOnShift\n                  && taskIsntFiltered\n                ) {\n                  allStaffOnShiftTotal++\n                }\n              },\n            )\n          },\n        )\n\n        total.push(allStaffOnShiftTotal)\n      },\n    )\n\n    return total\n  })\n}\n\nconst staffOnShift = createStaffOnConditionComputedProp('isOnShift')\nconst guideOnShift = createStaffOnConditionComputedProp('isGuide')\nconst officeOnShift = createStaffOnConditionComputedProp('isOffice')\nconst driverOnShift = createStaffOnConditionComputedProp('isDriver')\n\nconst staffShiftTotals = computed(() => {\n  return [\n    {\n      label: 'Staff on shift',\n      value: staffOnShift.value,\n    },\n    {\n      label: 'Guides on shift',\n      value: guideOnShift.value,\n    },\n    {\n      label: 'Office on shift',\n      value: officeOnShift.value,\n    },\n    {\n      label: 'Drivers on shift',\n      value: driverOnShift.value,\n    },\n  ]\n})\n\nconst assignTaskToDay = (day: IStaffScheduleDay, task: ITask | null) => {\n  changesMade.value = true\n\n  /**\n   * input task is null, must be the eraser - clear schedule for that day\n   */\n  if (!task) {\n    day.task = null\n    return\n  }\n\n  /**\n   * Handles holiday requests.\n   */\n  if (\n    day.task && task.slug === GlobalTasks.HOLIDAY_REQUESTED\n    && day.task.slug !== GlobalTasks.HOLIDAY_REQUESTED\n  ) {\n    day.holiday_request = !day.holiday_request\n    return\n  }\n  else {\n    day.holiday_request = false\n  }\n\n  /**\n   * day has task, but it's the same as the task we're trying to assign, clear task\n   * otherwise, assign task to day\n   */\n  if (task && day.task && day.task.id === task.id) {\n    day.task = null\n  }\n  else {\n    day.task = task\n  }\n}\n\nconst handleAssignTaskToDay = (\n  staffMember: IStaffSchedule,\n  day: IStaffScheduleDay,\n  selectedTask: ITask | null,\n) => {\n  if (\n    (\n      user.value?.id === staffMember.id\n      && selectedTask\n      && selectedTask.slug === GlobalTasks.HOLIDAY_REQUESTED\n    )\n    || userCanEditSchedule.value\n  ) {\n    assignTaskToDay(day, selectedTask)\n  }\n}\n\nconst handleSaveSchedule = async () => {\n  await saveSchedule(staffSchedule.value)\n  changesMade.value = false\n  originalSchedule.value = JSON.parse(JSON.stringify(staffSchedule.value))\n}\n\nconst resetAllChanges = () => {\n  changesMade.value = false\n  staffSchedule.value = JSON.parse(JSON.stringify(originalSchedule.value))\n}\n\nconst handleGetScheduleByDateAndDepartment = async (date: string, department: IDepartment) => {\n  // clear the schedule from the UI immediately\n  staffSchedule.value = {\n    daysInMonth: [],\n    staffSchedules: [],\n  }\n\n  staffSchedule.value = await getScheduleByDateAndDepartment(\n    date,\n    department,\n  )\n  originalSchedule.value = JSON.parse(JSON.stringify(staffSchedule.value))\n}\n\nonMounted(async () => {\n  await handleGetScheduleByDateAndDepartment(filterState.selectedMonth, filterState.selectedDepartment!)\n})\n\nwatch(() => filterState, async (newFilterState, oldFilterState) => {\n  const {\n    selectedOperationalBase,\n    selectedDepartment,\n    selectedMonth,\n  } = newFilterState\n\n  const baseChanged = oldFilterState.selectedOperationalBase !== selectedOperationalBase\n  const departmentChanged = oldFilterState.selectedDepartment !== selectedDepartment\n  const monthChanged = oldFilterState.selectedMonth !== selectedMonth\n\n  if (baseChanged || departmentChanged || monthChanged) {\n    await router.replace({ name: Routes.Schedule, query: { date: newFilterState.selectedMonth } })\n    await handleGetScheduleByDateAndDepartment(newFilterState.selectedMonth, newFilterState.selectedDepartment!)\n  }\n})\n</script>\n\n<template>\n  <div v-if=\"staffSchedule.staffSchedules.length\">\n    <div\n      v-if=\"userCanEditSchedule || changesMade\"\n      class=\"mb-3 flex h-[48px] w-full items-center justify-end rounded border border-gray-100 bg-white p-2\"\n    >\n      <div\n        v-if=\"changesMade\"\n        class=\"flex gap-3\"\n      >\n        <button\n          class=\"flex w-[40px] items-center justify-center rounded-md border border-gray-300 bg-white p-1 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 hover:bg-gray-100\"\n          title=\"Undo all changes\"\n          @click=\"resetAllChanges\"\n        >\n          <IconUndo class=\"h-5 w-5 fill-gray-800\" />\n        </button>\n\n        <Transition>\n          <button\n            v-if=\"changesMade\"\n            class=\"flex w-[40px] items-center justify-center rounded-md bg-blue-600 p-1 text-center text-sm font-semibold leading-6 text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 hover:bg-blue-500\"\n            title=\"Save all changes\"\n            @click=\"handleSaveSchedule\"\n          >\n            <ProgressSpinner\n              v-if=\"actionIsInProgress(scheduleActions.saveSchedule)\"\n              class=\"h-3 w-3 text-white\"\n            />\n            <IconSave\n              v-else\n              class=\"h-5 w-5 fill-white\"\n            />\n          </button>\n        </Transition>\n      </div>\n      <Transition name=\"save\">\n        <div\n          v-if=\"actionIsInSuccess(scheduleActions.saveSchedule)\"\n          class=\"flex justify-center\"\n        >\n          <div class=\"flex\">\n            <div class=\"shrink-0\">\n              <IconTickMarkCircle class=\"h-5 w-5 fill-green-400\" />\n            </div>\n            <div class=\"ml-2\">\n              <p\n                class=\"text-sm text-green-700\"\n                v-html=\"getActionSuccessMessage(scheduleActions.saveSchedule)\"\n              />\n            </div>\n          </div>\n        </div>\n      </Transition>\n    </div>\n\n    <div class=\"h-[600px] w-full overflow-y-scroll scrollbar-thin scrollbar-track-gray-100 scrollbar-thumb-blue-500/25\">\n      <table class=\"w-full border-collapse\">\n        <tbody>\n          <!-- date rows -->\n          <tr>\n            <td class=\"sticky left-0 top-0 z-[100] border border-gray-100 bg-white\" />\n            <td\n              v-for=\"day in staffSchedule.daysInMonth\"\n              :key=\"day.date\"\n              class=\"sticky top-0 z-[99] bg-white\"\n            >\n              <div\n                class=\"flex h-8 items-center justify-center text-xs text-gray-500\"\n                :class=\"[\n                  { 'border border-gray-100 bg-gray-100': day.isWeekend && !day.isToday },\n                  { 'border border-white bg-white': !day.isWeekend && !day.isToday },\n                  { 'border-x border-orange-500 bg-gray-100': day.isToday },\n                ]\"\n              >\n                {{ day.label }}\n              </div>\n            </td>\n          </tr>\n\n          <!-- staff rows -->\n          <tr\n            v-for=\"staffMember in filteredStaffSchedule\"\n            :key=\"staffMember.id\"\n          >\n            <td class=\"sticky left-0 z-10 h-12 min-w-[130px] max-w-[130px] border border-gray-100 bg-white md:w-auto md:min-w-[300px]\">\n              <div class=\"flex\">\n                <div class=\"relative mx-2 flex h-8 w-8 items-center justify-center rounded-full bg-gray-100 py-1\">\n                  <div\n                    v-if=\"staffMember.contactNumber\"\n                    class=\"absolute bottom-[-2px] left-[-5px] flex h-5 w-4 items-center justify-center rounded bg-white shadow\"\n                  >\n                    <a\n                      class=\"block\"\n                      :href=\"`tel:${staffMember.contactNumber}`\"\n                      :title=\"staffMember.contactNumber\"\n                    >\n                      <IconPhone class=\"h-5 w-5 fill-black\" />\n                    </a>\n                  </div>\n                  <img\n                    v-if=\"staffMember.profilePhotoSrc\"\n                    :src=\"staffMember.profilePhotoSrc\"\n                    class=\"h-full w-full rounded-full object-cover\"\n                    alt=\"Staff avatar.\"\n                  >\n                  <IconAccount\n                    v-else\n                    class=\"h-6 w-6 fill-gray-300\"\n                  />\n                </div>\n                <div class=\"flex flex-1 flex-col overflow-hidden bg-white pr-2 text-left\">\n                  <p\n                    class=\"truncate text-xs leading-none text-gray-600 md:text-sm\"\n                    v-html=\"staffMember.fullName\"\n                  />\n                  <div class=\"hidden items-center justify-between md:flex\">\n                    <div class=\"flex items-center justify-center space-x-1\">\n                      <img\n                        v-for=\"ability in staffMember.abilities\"\n                        :key=\"ability.id\"\n                        :src=\"ability.iconUrl\"\n                        :title=\"ability.name\"\n                        class=\"cursor-help\"\n                        alt=\"Staff ability icon.\"\n                      >\n                    </div>\n                    <div class=\"flex items-center space-x-1\">\n                      <span\n                        class=\"cursor-help text-center text-xs text-blue-500\"\n                        title=\"Allocated shift\"\n                        v-html=\"staffMember.schedule.filter(schedule => {\n                          const task = tasks.filter(task => schedule.task && schedule.task.id === task.id)[0]\n                          return task ? task.isPaid : false\n                        }).length\"\n                      />\n                      <span\n                        class=\"cursor-help text-center text-xs text-orange-500\"\n                        title=\"Holiday\"\n                        v-html=\"staffMember.schedule.filter(schedule => {\n                          const task = tasks.filter(task => schedule.task && schedule.task.id === task.id)[0]\n                          return task ? task.isHoliday : null\n                        }).length\"\n                      />\n                      <span\n                        class=\"cursor-help text-center text-xs text-green-500\"\n                        title=\"Sick\"\n                        v-html=\"staffMember.schedule.filter(schedule => {\n                          const task = tasks.filter(task => schedule.task && schedule.task.id === task.id)[0]\n                          return task ? task.isSick : null\n                        }).length\"\n                      />\n                      <span\n                        class=\"cursor-help text-center text-xs text-orange-500\"\n                        title=\"Training\"\n                        v-html=\"staffMember.schedule.filter(schedule => {\n                          const task = tasks.filter(task => schedule.task && schedule.task.id === task.id)[0]\n                          return task ? task.isTraining : null\n                        }).length\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </td>\n            <td\n              v-for=\"day in staffMember.schedule\"\n              :key=\"day.date\"\n            >\n              <div class=\"relative flex h-12 min-w-[30px] items-center justify-center border border-gray-100 bg-white\">\n                <button\n                  v-if=\"day.task?.id\"\n                  class=\"block h-full w-full py-2 hover:brightness-90\"\n                  :class=\"[\n                    { 'border-x border-orange-500': day.isToday },\n                    { 'cursor-not-allowed': !userCanEditSchedule && !userCanRequestHoliday(user!.id, staffMember.id, currentlySelectedTask) },\n                    tasks.find(task => task.id === day.task?.id) ? tasks.find(task => task.id === day.task?.id)?.class : 'bg-gray-400',\n                  ]\"\n                  @click=\"handleAssignTaskToDay(\n                    staffMember,\n                    day,\n                    currentlySelectedTask,\n                  )\"\n                >\n                  <img\n                    v-if=\"tasks.find(task => task.id === day.task?.id) && day.task.iconUrl\"\n                    class=\"absolute right-0 top-0\"\n                    :src=\"day.task.iconUrl\"\n                    alt=\"Task icon.\"\n                  >\n                </button>\n                <button\n                  v-else\n                  class=\"block h-full w-full py-2 hover:bg-gray-100\"\n                  :class=\"[\n                    { 'border-x border-orange-500': day.isToday },\n                    {\n                      'cursor-not-allowed':\n                        filterState.selectedDepartment\n                        && !userHasPermissionInDepartment(AppPermissions.EDIT_SCHEDULE, filterState.selectedDepartment)\n                        && !userCanRequestHoliday(user!.id, staffMember.id, currentlySelectedTask),\n                    },\n                  ]\"\n                  @click=\"userCanRequestHoliday(user!.id, staffMember.id, currentlySelectedTask) || userCanEditSchedule ? assignTaskToDay(day, currentlySelectedTask) : null\"\n                />\n                <div\n                  v-if=\"day.task && day.holiday_request\"\n                  class=\"absolute left-0 top-0 h-4 w-4 rounded-br bg-yellow-400\"\n                />\n              </div>\n            </td>\n          </tr>\n\n          <!-- date rows -->\n          <tr>\n            <td class=\"sticky left-0 z-[100] border border-gray-100 bg-white\" />\n            <td\n              v-for=\"day in staffSchedule.daysInMonth\"\n              :key=\"day.date\"\n              class=\"bg-white\"\n            >\n              <div\n                class=\"flex h-8 items-center justify-center text-xs text-gray-500\"\n                :class=\"[\n                  { 'border border-gray-100 bg-gray-100': day.isWeekend && !day.isToday },\n                  { 'border border-white bg-white': !day.isWeekend && !day.isToday },\n                  { 'border-x border-orange-500 bg-gray-100': day.isToday },\n                ]\"\n              >\n                {{ day.label }}\n              </div>\n            </td>\n          </tr>\n\n          <!-- staff count rows -->\n          <template\n            v-for=\"(staffShiftTotal, i) in staffShiftTotals\"\n            :key=\"i\"\n          >\n            <tr v-if=\"staffShiftTotal.value.length && !(i === 0 && filterState.selectedOperationalBase?.id !== 0)\">\n              <td class=\"sticky left-0 z-[100] border border-gray-100 bg-white text-right\">\n                <div class=\"px-2 py-1 text-xs text-gray-600\">\n                  <span v-text=\"staffShiftTotal.label\" />\n                </div>\n              </td>\n              <td\n                v-for=\"(count, ii) in staffShiftTotal.value\"\n                :key=\"ii\"\n              >\n                <div class=\"flex h-8 items-center justify-center border border-gray-100 bg-white text-xs text-gray-600\">\n                  <span v-text=\"count\" />\n                </div>\n              </td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<style scoped>\ntd {\n  padding: 0;\n  margin: 0;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { useRoute, useRouter } from 'vue-router/auto'\nimport MainContent from '@/shared/ui/layout/MainContent.vue'\nimport type { ITask } from '@/shared/types/tasks/ITask'\nimport VDataFilters from '@/shared/ui/inputs/VDataFilters.vue'\nimport { useTasks } from '@/shared/api/tasks/useTasks'\nimport TaskBar from '@/shared/ui/schedule/TaskBar.vue'\nimport Schedule from '@/shared/ui/schedule/Schedule.vue'\nimport type { IDataFilters } from '@/shared/types/inputs/IDataFilters'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\nimport { Routes } from '@/shared/lib/router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst { apiGetTasksByDepartmentAndOperationalBase } = useTasks()\n\nconst filterState = ref<IDataFilters>({\n  selectedDepartment: null,\n  selectedOperationalBase: null,\n  selectedRole: null,\n  selectedMonth: '',\n  selectedDate: '',\n})\n\n/**\n * TODO- feels more like a middleware. Refactor this.\n * If the route does not have a date, redirect to the dashboard.\n */\nif (!route.query.date) router.push({ name: Routes.Dashboard })\n\nconst currentlySelectedTask = ref<ITask | null>(null)\nconst tasks = ref<ITask[]>([])\n\nconst updateFilterState = (newFilterState: IDataFilters) => {\n  filterState.value = newFilterState\n}\n\n/**\n * Fetch tasks when department or operational base changes.\n */\nwatch(filterState, async (newFilterState, oldFilterState) => {\n  const { selectedOperationalBase, selectedDepartment } = newFilterState\n  const baseChanged = oldFilterState.selectedOperationalBase !== selectedOperationalBase\n  const departmentChanged = oldFilterState.selectedDepartment !== selectedDepartment\n\n  // Clear tasks if either base or department is null\n  if (!selectedOperationalBase || !selectedDepartment) {\n    tasks.value = []\n    return\n  }\n\n  // Fetch new tasks only if base or department has changed\n  if (baseChanged || departmentChanged) {\n    // reset currently selected task\n    currentlySelectedTask.value = null\n    tasks.value = await apiGetTasksByDepartmentAndOperationalBase(\n      selectedDepartment,\n      selectedOperationalBase,\n    )\n  }\n})\n</script>\n\n<template>\n  <MainContent main-content-title=\"Schedule\">\n    <header class=\"flex flex-col gap-3 pb-6 pt-4 lg:flex-row lg:items-center\">\n      <VDataFilters\n        :department-permissions-required=\"[\n          AppPermissions.VIEW_SCHEDULE,\n        ]\"\n        :filter-by-date=\"false\"\n        filter-by-month\n        filter-by-departments\n        filter-by-operational-bases\n        show-all-operational-bases\n        filter-by-roles\n        show-all-roles\n        @filter-state-updated=\"updateFilterState\"\n      />\n    </header>\n\n    <TaskBar\n      v-model:currently-selected-task=\"currentlySelectedTask\"\n      :tasks=\"tasks\"\n      :filter-state=\"filterState\"\n    />\n\n    <Schedule\n      v-if=\"filterState.selectedDepartment\"\n      :filter-state=\"filterState\"\n      :tasks=\"tasks\"\n      :currently-selected-task=\"currentlySelectedTask\"\n    />\n  </MainContent>\n</template>\n"],"names":["_hoisted_1","_hoisted_3","_cache","useTasksStore","defineStore","taskBasesIndex","ref","setTaskBaseIndex","i","addTaskBaseToIndex","updateTaskBasesInIndex","index","taskBase","resetTaskBasesStore","tasksIndex","setTasksIndex","addTaskToIndex","updateTasksInIndex","task","resetTasksStore","useTasks","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","useUi","taskActions","department","operationalBase","rsp","e","useSchedule","processActionSuccess","resetActionsInSuccess","user","storeToRefs","useUserStore","scheduleActions","date","departmentId","schedule","actionIsInProgress","currentlySelectedTask","_useModel","__props","selectTask","GlobalTasks","getActionSuccessMessage","actionIsInSuccess","userHasPermissionInDepartment","useAuth","router","useRouter","getScheduleByDateAndDepartment","saveSchedule","userCanEditSchedule","computed","AppPermissions","userCanRequestHoliday","authUserId","requestUserId","selectedTask","requestIsForSelf","taskSelectedIsHolidayRequest","changesMade","staffSchedule","originalSchedule","filteredStaffSchedule","staff","base","_a","role","_b","checkTaskConditions","condition","createStaffOnConditionComputedProp","total","day","allStaffOnShiftTotal","taskIsntFiltered","staffOnShift","guideOnShift","officeOnShift","driverOnShift","staffShiftTotals","assignTaskToDay","handleAssignTaskToDay","staffMember","handleSaveSchedule","resetAllChanges","handleGetScheduleByDateAndDepartment","onMounted","watch","newFilterState","oldFilterState","selectedOperationalBase","selectedDepartment","selectedMonth","baseChanged","departmentChanged","monthChanged","Routes","route","useRoute","apiGetTasksByDepartmentAndOperationalBase","filterState","tasks","updateFilterState"],"mappings":"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"}
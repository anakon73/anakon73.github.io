{"version":3,"file":"Index-TkSHyO1I.js","sources":["../../src/shared/api/useEventNotifications.ts","../../src/pages/event-notification-settings/Index.vue"],"sourcesContent":["import { storeToRefs } from 'pinia'\nimport { useUserStore } from '@/shared/api/stores/user'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport type { IEventNotification } from '@/shared/types/event-notifications/IEventNotification'\nimport type { IEventNotificationCategory } from '@/shared/types/event-notifications/IEventNotificationCategory'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { EventNotificationDTO } from '@/shared/types/event-notifications/EventNotificationCategoryDTOs'\n\nexport function useEventNotifications() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    processActionSuccess,\n    resetActionsInError,\n    resetActionsInSuccess,\n  } = useUi()\n  const { user } = storeToRefs(useUserStore())\n\n  const eventNotificationActions = {\n    saveEventNotification: {\n      id: 'saveEventNotification',\n      successMessage: 'Event notification saved successfully.',\n      errorMessage: 'There was a problem saving the event notification',\n    } as IAction,\n    getEventNotifications: {\n      id: 'getEventNotifications',\n      successMessage: 'Event notification retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the event notification',\n    } as IAction,\n    getEventNotificationCategoriesByDepartmentId: {\n      id: 'getEventNotificationCategoriesByDepartmentId',\n      successMessage: 'Event notification categories retrieved successfully.',\n      errorMessage: 'There was a problem retrieving event notification categories.',\n    } as IAction,\n    deleteEventNotification: {\n      id: 'deleteEventNotification',\n      successMessage: 'Event notifications deleted successfully.',\n      errorMessage: 'There was a problem deleting the event notifications.',\n    } as IAction,\n  }\n\n  const apiGetEventNotificationCategoriesByDepartmentId = async (): Promise<IEventNotificationCategory[] | void> => {\n    resetActionsInError()\n    addToActionsInProgress(eventNotificationActions.getEventNotificationCategoriesByDepartmentId)\n\n    try {\n      const rsp = await apiClient.get('/api/event-notification-categories')\n\n      removeFromActionsInProgress(eventNotificationActions.getEventNotificationCategoriesByDepartmentId)\n\n      return rsp.data.eventNotificationCategories\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(eventNotificationActions.getEventNotificationCategoriesByDepartmentId, e)\n    }\n  }\n\n  const apiGetNotificationEmails = async (\n    eventCategory: IEventNotificationCategory,\n    department: IDepartment,\n  ): Promise<IEventNotification[] | void> => {\n    resetActionsInError()\n    addToActionsInProgress(eventNotificationActions.getEventNotifications)\n\n    try {\n      const rsp = await apiClient.get('/api/event-notifications', {\n        params: {\n          eventCategoryId: eventCategory.id,\n          selectedDepartmentId: department.id,\n        },\n      })\n\n      removeFromActionsInProgress(eventNotificationActions.getEventNotifications)\n      return rsp.data.eventNotifications\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(eventNotificationActions.getEventNotifications, e)\n    }\n  }\n\n  const saveEventNotification = async (eventNotification: EventNotificationDTO): Promise<IEventNotification | void> => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(eventNotificationActions.saveEventNotification)\n\n    try {\n      const rsp = await apiClient.post('/api/event-notification', {\n        email_address: eventNotification.email,\n        departmentId: eventNotification.department.id,\n        eventNotificationCategoryId: eventNotification.eventNotificationCategory.id,\n      })\n\n      removeFromActionsInProgress(eventNotificationActions.saveEventNotification)\n      processActionSuccess(eventNotificationActions.saveEventNotification)\n      setTimeout(() => {\n        resetActionsInSuccess()\n      }, 3000)\n\n      return rsp.data.eventNotification\n    }\n    catch (e: unknown) {\n      console.log(e)\n      removeFromActionsInProgress(eventNotificationActions.saveEventNotification)\n      processActionError(eventNotificationActions.saveEventNotification, e)\n      setTimeout(() => {\n        resetActionsInError()\n      }, 3000)\n    }\n  }\n\n  const deleteEventNotification = async (eventNotification: IEventNotification): Promise<boolean> => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(eventNotificationActions.deleteEventNotification)\n\n    try {\n      await apiClient.delete(`/api/event-notifications/${eventNotification.id}`)\n\n      removeFromActionsInProgress(eventNotificationActions.deleteEventNotification)\n      processActionSuccess(eventNotificationActions.deleteEventNotification)\n      setTimeout(() => {\n        resetActionsInSuccess()\n      }, 3000)\n\n      return true\n    }\n    catch (e: any) {\n      removeFromActionsInProgress(eventNotificationActions.deleteEventNotification)\n      processActionError(eventNotificationActions.deleteEventNotification, e)\n      setTimeout(() => {\n        resetActionsInError()\n      }, 3000)\n      return false\n    }\n  }\n\n  return {\n    user,\n    eventNotificationActions,\n    saveEventNotification,\n    apiGetNotificationEmails,\n    deleteEventNotification,\n    apiGetEventNotificationCategoriesByDepartmentId,\n  }\n}\n","<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport MainContent from '@/shared/ui/layout/MainContent.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport IconTickMarkCircle from '@/shared/ui/icons/IconTickMarkCircle.vue'\nimport IconPlusSimple from '@/shared/ui/icons/IconPlusSimple.vue'\nimport { useEventNotifications } from '@/shared/api/useEventNotifications'\nimport type { IEventNotification } from '@/shared/types/event-notifications/IEventNotification'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport FeedbackWarning from '@/shared/ui/FeedbackWarning.vue'\nimport VDataFilters from '@/shared/ui/inputs/VDataFilters.vue'\nimport type { IDataFilters } from '@/shared/types/inputs/IDataFilters'\nimport type { IEventNotificationCategory } from '@/shared/types/event-notifications/IEventNotificationCategory'\nimport type {\n  EventNotificationDTO,\n} from '@/shared/types/event-notifications/EventNotificationCategoryDTOs'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\nimport { useAuth } from '@/shared/api/useAuth'\n\nconst {\n  actionIsInProgress,\n  getActionSuccessMessage,\n  getActionErrorMessage,\n  actionIsInSuccess,\n  actionIsInError,\n} = useUi()\nconst {\n  apiGetEventNotificationCategoriesByDepartmentId,\n  apiGetNotificationEmails,\n  saveEventNotification,\n  deleteEventNotification,\n  eventNotificationActions,\n} = useEventNotifications()\n\nconst { userHasPermissionInDepartment } = useAuth()\n\nconst filterState = ref<IDataFilters>({\n  selectedDepartment: null,\n  selectedOperationalBase: null,\n  selectedRole: null,\n  selectedMonth: '',\n  selectedDate: '',\n})\n\nconst eventNotificationCategories = ref<IEventNotificationCategory[]>([])\n\nconst eventNotificationsDTO = ref<EventNotificationDTO[]>([])\n\nconst loading = ref(false)\nconst handleFilterStateUpdate = async (newFilterState: IDataFilters) => {\n  loading.value = true\n  filterState.value = newFilterState\n\n  const data = await apiGetEventNotificationCategoriesByDepartmentId()\n\n  if (data && filterState.value.selectedDepartment) {\n    eventNotificationCategories.value = data\n\n    eventNotificationsDTO.value = data.map((category) => ({\n      department: filterState.value.selectedDepartment!,\n      eventNotificationCategory: category,\n      email: '',\n      existingEmails: [],\n    }))\n\n    const dtoPromises = eventNotificationsDTO.value.map(async (dto) => {\n      const notificationEmails = await apiGetNotificationEmails(\n        dto.eventNotificationCategory,\n        dto.department,\n      )\n      if (notificationEmails) {\n        dto.existingEmails = notificationEmails\n      }\n      return dto\n    })\n\n    eventNotificationsDTO.value = await Promise.all(dtoPromises)\n  }\n  loading.value = false\n}\n\nconst handleDeleteEventNotification = async (eventNotification: IEventNotification) => {\n  const rsp = await deleteEventNotification(eventNotification)\n\n  if (rsp && eventNotificationsDTO.value?.length > 0) {\n    const index = eventNotificationsDTO.value.findIndex(\n      (d) => d.eventNotificationCategory.id === eventNotification.eventCategoryId,\n    )\n\n    if (index !== -1) {\n      const updatedDTO = { ...eventNotificationsDTO.value[index] }\n\n      updatedDTO.existingEmails.splice(\n        updatedDTO.existingEmails.findIndex((e) => e.id === eventNotification.id),\n        1,\n      )\n      updatedDTO.email = ''\n\n      eventNotificationsDTO.value[index] = updatedDTO\n    }\n  }\n}\n\nconst handleSaveNotification = async (notificationDTO: EventNotificationDTO) => {\n  const rsp = await saveEventNotification(notificationDTO)\n\n  if (rsp && eventNotificationsDTO.value?.length > 0) {\n    const index = eventNotificationsDTO.value.findIndex(\n      (d) => d.eventNotificationCategory.id === rsp.eventCategoryId,\n    )\n\n    if (index !== -1) {\n      const updatedDTO = { ...eventNotificationsDTO.value[index] }\n\n      updatedDTO.existingEmails.push(rsp)\n      updatedDTO.email = ''\n\n      eventNotificationsDTO.value[index] = updatedDTO\n    }\n  }\n}\n</script>\n\n<template>\n  <MainContent main-content-title=\"Event Notifications\">\n    <div class=\"space-y-8 divide-y divide-gray-200\">\n      <div class=\"space-y-8 divide-y divide-gray-200 sm:space-y-5\">\n        <div>\n          <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n            Department\n          </p>\n          <VDataFilters\n            :department-permissions-required=\"[\n              AppPermissions.VIEW_EVENT_NOTIFICATIONS,\n            ]\"\n            filter-by-departments\n            @filter-state-updated=\"handleFilterStateUpdate\"\n          />\n\n          <p class=\"mt-4 text-sm text-gray-500\">\n            Use the forms below to add or remove email addresses that should receive notifications when an event occurs. Email addresses can be from within or outside of the organisation.\n          </p>\n        </div>\n\n        <div class=\"space-y-3 pt-3 sm:space-y-5\">\n          <div class=\"max-w-[1280px] space-y-6 sm:space-y-5\">\n            <form\n              v-for=\"(category, i) in eventNotificationCategories\"\n              :key=\"category.id\"\n              class=\"flex flex-col sm:items-start sm:gap-4 sm:border-t sm:border-gray-200 sm:pt-5 md:flex-row\"\n            >\n              <div class=\"sm:col-span-1\">\n                <label\n                  class=\"block text-sm font-medium text-gray-700\"\n                  v-text=\"category.label\"\n                />\n                <div\n                  v-if=\"eventNotificationsDTO\"\n                  class=\"mt-1 flex items-center\"\n                >\n                  <input\n                    v-if=\"filterState.selectedDepartment\"\n                    v-model=\"eventNotificationsDTO[i].email\"\n                    :disabled=\"!userHasPermissionInDepartment(\n                      AppPermissions.MANAGE_EVENT_NOTIFICATIONS,\n                      filterState.selectedDepartment,\n                    )\"\n                    type=\"email\"\n                    required\n                    placeholder=\"Enter email address...\"\n                    class=\"peer block flex-1 rounded-md border-gray-300 shadow-sm placeholder:text-gray-300 focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  >\n                  <button\n                    v-if=\"filterState.selectedDepartment && userHasPermissionInDepartment(\n                      AppPermissions.MANAGE_EVENT_NOTIFICATIONS,\n                      filterState.selectedDepartment,\n                    )\"\n                    class=\"mx-3 inline-flex h-[38px] w-[38px] items-center justify-center rounded-md border border-transparent bg-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500 disabled:cursor-not-allowed disabled:opacity-50 hover:bg-blue-700\"\n                    :disabled=\"eventNotificationsDTO[i].email.length === 0\"\n                    @click.prevent=\"handleSaveNotification(eventNotificationsDTO[i])\"\n                  >\n                    <IconPlusSimple\n                      v-if=\"!actionIsInProgress(eventNotificationActions.saveEventNotification)\"\n                      class=\"h-4 w-4 fill-white\"\n                    />\n                    <ProgressSpinner\n                      v-if=\"actionIsInProgress(eventNotificationActions.saveEventNotification)\"\n                      class=\"h-3 w-3 text-white\"\n                    />\n                  </button>\n                </div>\n              </div>\n\n              <div\n                v-if=\"eventNotificationsDTO\"\n                class=\"mt-3\"\n              >\n                <p\n                  class=\"mt-1 text-sm text-gray-500\"\n                  v-text=\"category.description\"\n                />\n                <FeedbackWarning\n                  v-if=\"!loading && eventNotificationsDTO[i].existingEmails.length === 0\"\n                  class=\"mt-2\"\n                  message=\"There are currently no email addresses set up to receive daily summary emails.\"\n                />\n                <ProgressSpinner\n                  v-if=\"actionIsInProgress(eventNotificationActions.getEventNotifications)\"\n                  class=\"mt-1 h-4 w-4 text-gray-500\"\n                />\n                <div>\n                  <span\n                    v-for=\"eventNotification in eventNotificationsDTO[i].existingEmails\"\n                    :key=\"eventNotification.id\"\n                    class=\"m-1 inline-flex items-center gap-x-0.5 rounded-md bg-blue-100 px-2 py-1 text-xs font-medium text-blue-700 first:ml-0\"\n                  >\n                    {{ eventNotification.emailAddress }}\n                    <button\n                      v-if=\"filterState.selectedDepartment && userHasPermissionInDepartment(\n                        AppPermissions.MANAGE_EVENT_NOTIFICATIONS,\n                        filterState.selectedDepartment,\n                      )\"\n                      :disabled=\"actionIsInProgress({ id: `deleteEventNotification-${eventNotification.id}` })\"\n                      type=\"button\"\n                      class=\"group relative -mr-1 flex h-3.5 w-3.5 items-center justify-center rounded-sm\"\n                      :class=\"{ 'hover:bg-blue-600/20': !actionIsInProgress({ id: `deleteEventNotification-${eventNotification.id}` }) }\"\n                      @click=\"handleDeleteEventNotification(eventNotification)\"\n                    >\n                      <svg\n                        v-if=\"!actionIsInProgress(eventNotificationActions.deleteEventNotification)\"\n                        viewBox=\"0 0 14 14\"\n                        class=\"h-3.5 w-3.5 stroke-blue-800/50 group-hover:stroke-blue-800/75\"\n                      >\n                        <path d=\"M4 4l6 6m0-6l-6 6\" />\n                      </svg>\n                      <ProgressSpinner\n                        v-if=\"actionIsInProgress(eventNotificationActions.deleteEventNotification)\"\n                        class=\"h-2 w-2 text-blue-800/50\"\n                      />\n                      <span class=\"absolute -inset-1\" />\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <Transition name=\"save\">\n      <div\n        v-if=\"actionIsInSuccess(eventNotificationActions.deleteEventNotification)\"\n        class=\"fixed inset-x-0 top-0 flex justify-center p-2\"\n      >\n        <div class=\"w-[300px] rounded-md border border-green-100 bg-green-50 p-3 md:p-4\">\n          <div class=\"flex\">\n            <div class=\"shrink-0\">\n              <IconTickMarkCircle class=\"h-5 w-5 fill-green-400\" aria-hidden=\"true\" />\n            </div>\n            <div class=\"ml-3\">\n              <p\n                class=\"text-sm text-green-700\"\n                v-html=\"getActionSuccessMessage(eventNotificationActions.deleteEventNotification)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Transition>\n\n    <Transition name=\"save\">\n      <div\n        v-if=\"actionIsInSuccess(eventNotificationActions.saveEventNotification)\"\n        class=\"fixed inset-x-0 top-0 flex justify-center p-2\"\n      >\n        <div class=\"w-[300px] rounded-md border border-green-100 bg-green-50 p-3 md:p-4\">\n          <div class=\"flex\">\n            <div class=\"shrink-0\">\n              <IconTickMarkCircle class=\"h-5 w-5 fill-green-400\" aria-hidden=\"true\" />\n            </div>\n            <div class=\"ml-3\">\n              <p\n                class=\"text-sm text-green-700\"\n                v-html=\"getActionSuccessMessage(eventNotificationActions.saveEventNotification)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Transition>\n\n    <Transition name=\"save\">\n      <div\n        v-if=\"actionIsInError(eventNotificationActions.deleteEventNotification, true)\"\n        class=\"fixed inset-x-0 top-0 flex justify-center p-2\"\n      >\n        <div class=\"w-[300px] rounded-md border border-red-100 bg-red-50 p-3 md:p-4\">\n          <div class=\"flex\">\n            <div class=\"shrink-0\">\n              <IconClose class=\"h-5 w-5 fill-red-400\" aria-hidden=\"true\" />\n            </div>\n            <div class=\"ml-3\">\n              <p\n                class=\"text-sm text-red-700\"\n                v-html=\"getActionErrorMessage(eventNotificationActions.deleteEventNotification, true)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Transition>\n\n    <Transition name=\"save\">\n      <div\n        v-if=\"actionIsInError(eventNotificationActions.saveEventNotification, true)\"\n        class=\"fixed inset-x-0 top-0 flex justify-center p-2\"\n      >\n        <div class=\"w-[300px] rounded-md border border-red-100 bg-red-50 p-3 md:p-4\">\n          <div class=\"flex\">\n            <div class=\"shrink-0\">\n              <IconClose class=\"h-5 w-5 fill-red-400\" aria-hidden=\"true\" />\n            </div>\n            <div class=\"ml-3\">\n              <p\n                class=\"text-sm text-red-700\"\n                v-html=\"getActionErrorMessage(eventNotificationActions.saveEventNotification, true)\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Transition>\n  </MainContent>\n</template>\n"],"names":["useEventNotifications","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","processActionSuccess","resetActionsInError","resetActionsInSuccess","useUi","user","storeToRefs","useUserStore","eventNotificationActions","eventNotification","rsp","e","eventCategory","department","actionIsInProgress","getActionSuccessMessage","getActionErrorMessage","actionIsInSuccess","actionIsInError","apiGetEventNotificationCategoriesByDepartmentId","apiGetNotificationEmails","saveEventNotification","deleteEventNotification","userHasPermissionInDepartment","useAuth","filterState","ref","eventNotificationCategories","eventNotificationsDTO","loading","handleFilterStateUpdate","newFilterState","data","category","dtoPromises","dto","notificationEmails","handleDeleteEventNotification","_a","index","d","updatedDTO","handleSaveNotification","notificationDTO"],"mappings":"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"}
import{u as y,a as T,b as u}from"./preview-D0Pi-YKn.js";function M(){const{apiClient:n}=y(),{addToActionsInProgress:a,removeFromActionsInProgress:g,processActionError:t,resetActionsInError:s,processActionSuccess:c,resetActionsInSuccess:l}=T(),{fetchAndStoreAlertsIndex:o}=u(),r={getTrainingByDepartmentId:{id:"getTrainingByDepartmentId",successMessage:"Training retrieved successfully.",errorMessage:"There was a problem retrieving training."},getAllTrainingByUserAbility:{id:"getAllTrainingByUserAbility",successMessage:"Training retrieved successfully.",errorMessage:"There was a problem retrieving training."},getAllTrainingLogsByUserId:{id:"getAllTrainingLogsByUserId",successMessage:"Training logs retrieved successfully.",errorMessage:"There was a problem retrieving the training logs."},trainUser:{id:"trainUser",successMessage:"User successfully trained.",errorMessage:"There was a problem training the user."},deleteTrainingLog:{id:"deleteTrainingLog",successMessage:"Training log successfully deleted.",errorMessage:"There was a problem deleting the training log."},getTrainingById:{id:"getTrainingById",successMessage:"Training successfully retrieved.",errorMessage:"There was a problem retrieving the training."},editTraining:{id:"editTraining",successMessage:"Training successfully updated.",errorMessage:"There was a problem updating the training."},createTraining:{id:"createTraining",successMessage:"Training successfully created.",errorMessage:"There was a problem creating the training."}};return{trainingActions:r,apiGetTrainingByDepartmentId:async i=>{s(),a(r.getTrainingByDepartmentId);try{const e=await n.get("/api/training",{params:{selectedDepartmentId:i}});return g(r.getTrainingByDepartmentId),e.data.training}catch(e){t(r.getTrainingByDepartmentId,e)}},getAllTrainingByUserAbility:async()=>{s(),a(r.getAllTrainingByUserAbility);try{const i=await n.get("/api/training-by-user-ability");return g(r.getAllTrainingByUserAbility),i.data.training}catch(i){t(r.getAllTrainingByUserAbility,i)}},getAllTrainingLogsByUserId:async i=>{s(),a(r.getAllTrainingLogsByUserId);try{const e=await n.get(`/api/user/${i}/training-logs`);return g(r.getAllTrainingLogsByUserId),e.data}catch(e){t(r.getAllTrainingLogsByUserId,e)}},deleteTrainingLog:async i=>{s(),l();const e={...r.deleteTrainingLog};e.id=`${e.id}-${i}`,a(e);try{await n.delete(`/api/training-log/${i}`),await o(),c(e)}catch(d){return t(e,d),!1}},getTrainingById:async i=>{s(),a(r.getTrainingById);try{const e=await n.get(`/api/training/${i}`);return g(r.getTrainingById),e.data.training}catch(e){t(r.getTrainingById,e)}},editTraining:async i=>{s(),l(),a(r.editTraining);try{const e=await n.put(`/api/training/${i.id}`,{department_id:i.department.id,training_category_id:i.category.id,name:i.name,requires_feedback:i.requiresFeedback,mandatory:i.mandatory,required_abilities:i.requiredAbilities});return c(r.editTraining),e.data.training}catch(e){t(r.editTraining,e)}},trainUser:async i=>{s(),l(),a(r.trainUser);try{await n.post(`/api/user/${i.trainee.id}/train`,i),await o(),c(r.trainUser)}catch(e){return t(r.trainUser,e),!1}},createTraining:async i=>{s(),l(),a(r.createTraining);try{const e=await n.post("/api/training",i);return c(r.createTraining),e.data.training}catch(e){console.log(e),t(r.createTraining,e)}}}}export{M as u};

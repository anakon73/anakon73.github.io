{"version":3,"file":"Create-5QvLvKyO.js","sources":["../../src/pages/training/Create.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { storeToRefs } from 'pinia'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport { useTraining } from '@/shared/api/useTraining'\nimport VDataFilters from '@/shared/ui/inputs/VDataFilters.vue'\nimport type { IDataFilters } from '@/shared/types/inputs/IDataFilters'\nimport type { CreateTrainingDTO } from '@/shared/types/training/TrainingDTOs'\nimport VTrainingCategorySelect from '@/shared/ui/inputs/VTrainingCategorySelect.vue'\nimport type { ITraining } from '@/shared/types/training/ITraining'\nimport { useUiStore } from '@/shared/lib/composables/ui'\nimport { useTrainingStore } from '@/shared/api/stores/training'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst { trainingActions, createTraining } = useTraining()\nconst { storeFilterState } = storeToRefs(useUiStore())\nconst { storeAddTraining } = useTrainingStore()\n\nconst createTrainingFormElement = ref<HTMLFormElement | null>(null)\n\nconst createTrainingDTO = ref<CreateTrainingDTO>({\n  departmentId: 0,\n  categoryId: 1,\n  name: '',\n})\n\nconst filterState = ref<IDataFilters>({\n  selectedDepartment: null,\n  selectedOperationalBase: null,\n  selectedRole: null,\n  selectedMonth: '',\n  selectedDate: '',\n})\n\nconst handleCreateTraining = async () => {\n  const training = await validateForm<ITraining>(createTrainingFormElement.value, () => createTraining(createTrainingDTO.value))\n\n  if (training) {\n    if (training.department.id === storeFilterState.value.selectedDepartment?.id) {\n      storeAddTraining(training)\n    }\n  }\n}\n\nconst handleFilterStateUpdate = async (newFilterState: IDataFilters) => {\n  filterState.value = newFilterState\n  if (newFilterState.selectedDepartment) {\n    createTrainingDTO.value.departmentId = newFilterState.selectedDepartment.id\n  }\n}\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <div class=\"sticky top-0 z-10 flex w-full items-center justify-end bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(trainingActions.createTraining)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-else\n          :to=\"{ name: $Routes.Training }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        id=\"create_training_form\"\n        ref=\"createTrainingFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"mb-6\">\n          <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n            Create Training.\n          </h3>\n          <p class=\"mt-1 text-sm text-gray-500\">\n            Use the form below to create a new training exercise. Once created, you can add categories and required abilities.\n          </p>\n        </div>\n\n        <div class=\"grid grid-cols-1 gap-x-4 gap-y-6 pt-6\">\n          <div>\n            <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n              Department\n            </p>\n            <VDataFilters\n              :department-permissions-required=\"[\n                AppPermissions.MANAGE_TRAINING,\n              ]\"\n              :filter-state=\"filterState\"\n              @filter-state-updated=\"handleFilterStateUpdate\"\n            />\n          </div>\n\n          <div>\n            <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n              Training Category\n            </p>\n            <VTrainingCategorySelect v-model=\"createTrainingDTO.categoryId\" />\n          </div>\n\n          <div>\n            <label for=\"training_name\" class=\"block text-sm font-medium text-gray-700\">\n              Training Name\n            </label>\n            <div class=\"mt-1\">\n              <input\n                id=\"training_name\"\n                v-model=\"createTrainingDTO.name\"\n                type=\"text\"\n                class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                required\n              >\n            </div>\n          </div>\n        </div>\n\n        <div class=\"relative pt-5\">\n          <div class=\"flex items-center justify-end\">\n            <Transition name=\"alert\">\n              <ActionSuccessAlert\n                v-if=\"actionIsInSuccess(trainingActions.createTraining)\"\n                :action=\"trainingActions.createTraining\"\n              />\n            </Transition>\n            <Transition name=\"alert\">\n              <ActionErrorAlert\n                v-if=\"actionIsInError(trainingActions.createTraining)\"\n                :action=\"trainingActions.createTraining\"\n              />\n            </Transition>\n            <div class=\"flex items-center\">\n              <button\n                class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none hover:bg-blue-700\"\n                @click.prevent=\"handleCreateTraining\"\n              >\n                <span v-if=\"!actionIsInProgress(trainingActions.createTraining)\">\n                  Save Training\n                </span>\n                <ProgressSpinner\n                  v-else\n                  class=\"h-3 w-3 text-white\"\n                />\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  </RightDrawer>\n</template>\n"],"names":["validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","trainingActions","createTraining","useTraining","storeFilterState","storeToRefs","useUiStore","storeAddTraining","useTrainingStore","createTrainingFormElement","ref","createTrainingDTO","filterState","handleCreateTraining","training","_a","handleFilterStateUpdate","newFilterState"],"mappings":"y+HAmBA,KAAM,CAAE,aAAAA,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,IAC3E,CAAE,gBAAAC,EAAiB,eAAAC,CAAe,EAAIC,EAAY,EAClD,CAAE,iBAAAC,CAAqB,EAAAC,EAAYC,EAAY,CAAA,EAC/C,CAAE,iBAAAC,GAAqBC,IAEvBC,EAA4BC,EAA4B,IAAI,EAE5DC,EAAoBD,EAAuB,CAC/C,aAAc,EACd,WAAY,EACZ,KAAM,EAAA,CACP,EAEKE,EAAcF,EAAkB,CACpC,mBAAoB,KACpB,wBAAyB,KACzB,aAAc,KACd,cAAe,GACf,aAAc,EAAA,CACf,EAEKG,EAAuB,SAAY,OACjC,MAAAC,EAAW,MAAMlB,EAAwBa,EAA0B,MAAO,IAAMP,EAAeS,EAAkB,KAAK,CAAC,EAEzHG,GACEA,EAAS,WAAW,OAAOC,EAAAX,EAAiB,MAAM,qBAAvB,YAAAW,EAA2C,KACxER,EAAiBO,CAAQ,CAE7B,EAGIE,EAA0B,MAAOC,GAAiC,CACtEL,EAAY,MAAQK,EAChBA,EAAe,qBACCN,EAAA,MAAM,aAAeM,EAAe,mBAAmB,GAC3E"}
{"version":3,"file":"useExperienceLocation-WT3dP7yS.js","sources":["../../src/shared/api/stores/experienceLocation.ts","../../src/shared/api/useExperienceLocation.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IExperienceLocation } from '@/shared/types/experience-locations/IExperienceLocation'\n\nexport const useExperienceLocationStore = defineStore('experienceLocations', () => {\n  const experienceLocationsIndex = ref<IExperienceLocation[]>([])\n\n  function setExperienceLocationsIndex(i: IExperienceLocation[]) {\n    experienceLocationsIndex.value = i\n  }\n\n  function addExperienceLocationToIndex(i: IExperienceLocation) {\n    experienceLocationsIndex.value.push(i)\n  }\n\n  function updateExperienceLocationsInIndex(i: IExperienceLocation) {\n    const index = experienceLocationsIndex.value.findIndex((experience) => experience.id === i.id)\n    experienceLocationsIndex.value[index] = i\n  }\n\n  function resetExperienceLocationsStore() {\n    experienceLocationsIndex.value = []\n  }\n\n  return {\n    experienceLocationsIndex,\n    setExperienceLocationsIndex,\n    addExperienceLocationToIndex,\n    updateExperienceLocationsInIndex,\n    resetExperienceLocationsStore,\n  }\n})\n","import { storeToRefs } from 'pinia'\nimport { ref } from 'vue'\nimport { useRoute } from 'vue-router/auto'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useExperienceLocationStore } from '@/shared/api/stores/experienceLocation'\nimport type { IEditExperienceLocationFormData } from '@/shared/types/experience-locations/IEditExperienceLocationFormData'\nimport type { ICreateExperienceLocationFormData } from '@/shared/types/experience-locations/ICreateExperienceLocationFormData'\nimport type { IExperienceLocation } from '@/shared/types/experience-locations/IExperienceLocation'\nimport type { Routes } from '@/shared/lib/router'\nimport type { GetResponse } from '@/shared/types/requests/ResponseTypes'\nimport type {\n  IExperienceLocationWithLogsFlag,\n} from '@/shared/types/dashboard/environment-conditions/IExperienceLocationWithLogsFlag'\n\nexport function useExperienceLocation() {\n  const route = useRoute<typeof Routes.ExperienceLocationEdit>()\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n    processActionSuccess,\n    resetActionsInSuccess,\n  } = useUi()\n\n  const {\n    setExperienceLocationsIndex,\n    resetExperienceLocationsStore,\n    addExperienceLocationToIndex,\n    updateExperienceLocationsInIndex,\n  } = useExperienceLocationStore()\n  const {\n    experienceLocationsIndex,\n  } = storeToRefs(useExperienceLocationStore())\n\n  const experienceLocationActions = {\n    getExperienceLocationsByUser: {\n      id: 'getExperienceLocationsByUser',\n      successMessage: 'Experience locations retrieved successfully.',\n      errorMessage: 'Failed to retrieve Experience locations.',\n    } as IAction,\n    getAllExperienceLocations: {\n      id: 'getAllExperienceLocations',\n      successMessage: 'Experience locations retrieved successfully.',\n      errorMessage: 'Failed to retrieve Experience locations.',\n    } as IAction,\n    getAllExperienceLocationsByOperationalBaseId: {\n      id: 'getAllExperienceLocationsByOperationalBaseId',\n      successMessage: 'Experience Locations retrieved successfully.',\n      errorMessage: 'Failed to retrieve Experience Locations.',\n    } as IAction,\n    createExperienceLocation: {\n      id: 'createExperienceLocation',\n      successMessage: 'Experience Location created successfully.',\n      errorMessage: 'Failed to create Experience Location.',\n    } as IAction,\n    getExperienceLocationById: {\n      id: 'getExperienceLocationById',\n      successMessage: 'Experience Location retrieved successfully.',\n      errorMessage: 'Failed to retrieve Experience Location.',\n    } as IAction,\n    editExperienceLocation: {\n      id: 'editExperienceLocation',\n      successMessage: 'Experience Location edited successfully.',\n      errorMessage: 'Failed to edit Experience Location.',\n    },\n  }\n\n  const createExperienceLocationFormData = ref<ICreateExperienceLocationFormData>({\n    operationalBaseId: route.params.operationalBaseId ? route.params.operationalBaseId.toString() : '',\n    name: '',\n    latitude: '64.025125',\n    longitude: '-16.978723',\n  })\n\n  // TODO this gets created anywhere we use the useExperienceLocation composable.\n  // might be worth sticking it in a method, so it's only created when explicitly called.\n  const editExperienceLocationFormData = ref<IEditExperienceLocationFormData>({\n    id: route.params.experienceLocationId ? route.params.experienceLocationId.toString() : '',\n    operationalBaseId: route.params.operationalBaseId ? route.params.operationalBaseId.toString() : '',\n    name: '',\n    latitude: '64.025125',\n    longitude: '-16.978723',\n  })\n\n  const fetchAndStoreAllExperienceLocationsIndex = async () => {\n    resetActionsInError()\n    addToActionsInProgress(experienceLocationActions.getAllExperienceLocations)\n\n    try {\n      const rsp = await apiClient.get('/api/experience-locations')\n      setExperienceLocationsIndex(rsp.data.experienceLocations)\n      removeFromActionsInProgress(experienceLocationActions.getAllExperienceLocations)\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(experienceLocationActions.getAllExperienceLocations, e)\n    }\n  }\n\n  const fetchAndStoreExperienceLocationsByOperationalBaseIdIndex = async (operationalBaseId: number): Promise<IExperienceLocation[] | void> => {\n    resetActionsInError()\n    addToActionsInProgress(experienceLocationActions.getAllExperienceLocationsByOperationalBaseId)\n\n    try {\n      const rsp = await apiClient.get(`/api/experience-locations/${operationalBaseId}`)\n      setExperienceLocationsIndex(rsp.data.experienceLocations)\n      removeFromActionsInProgress(experienceLocationActions.getAllExperienceLocationsByOperationalBaseId)\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(experienceLocationActions.getAllExperienceLocations, e)\n    }\n  }\n\n  const createExperienceLocation = async (experienceLocationData: ICreateExperienceLocationFormData) => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(experienceLocationActions.createExperienceLocation)\n\n    try {\n      const rsp = await apiClient.post('/api/experience-location', experienceLocationData)\n      addExperienceLocationToIndex(rsp.data.experienceLocation)\n      processActionSuccess(experienceLocationActions.createExperienceLocation)\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(experienceLocationActions.createExperienceLocation, e)\n    }\n  }\n\n  const getExperienceLocationById = async (experienceLocationId: string) => {\n    resetActionsInError()\n    addToActionsInProgress(experienceLocationActions.getExperienceLocationById)\n\n    try {\n      const rsp = await apiClient.get(`/api/experience-location/${experienceLocationId}`)\n      removeFromActionsInProgress(experienceLocationActions.getExperienceLocationById)\n      return rsp.data.experienceLocation\n    }\n    catch (e: any) {\n      processActionError(experienceLocationActions.getExperienceLocationById, e)\n    }\n  }\n\n  const editExperienceLocation = async (experienceLocationData: IEditExperienceLocationFormData | null) => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(experienceLocationActions.editExperienceLocation)\n\n    try {\n      const rsp = await apiClient.put(`/api/experience-location/${experienceLocationData!.id}`, {\n        experienceLocationData,\n      })\n      updateExperienceLocationsInIndex(rsp.data.experienceLocation)\n      processActionSuccess(experienceLocationActions.editExperienceLocation)\n      return rsp.data.experienceLocation\n    }\n    catch (e: any) {\n      processActionError(experienceLocationActions.editExperienceLocation, e)\n    }\n  }\n\n  const apiGetExperienceLocationsByUser = async (): Promise<GetResponse<'experienceLocations', IExperienceLocationWithLogsFlag[]> | undefined> => {\n    resetActionsInError()\n    addToActionsInProgress(experienceLocationActions.getExperienceLocationsByUser)\n\n    try {\n      const rsp = await apiClient.get('/api/experience-locations-by-user')\n      removeFromActionsInProgress(experienceLocationActions.getExperienceLocationsByUser)\n\n      return rsp\n    }\n    catch (e: any) {\n      processActionError(experienceLocationActions.getExperienceLocationsByUser, e)\n    }\n  }\n\n  const getAllExperienceLocationsFromStore = () => {\n    return experienceLocationsIndex.value\n  }\n\n  return {\n    experienceLocationActions,\n    apiGetExperienceLocationsByUser,\n    fetchAndStoreAllExperienceLocationsIndex,\n    fetchAndStoreExperienceLocationsByOperationalBaseIdIndex,\n    resetExperienceLocationsStore,\n    getAllExperienceLocationsFromStore,\n    createExperienceLocation,\n    getExperienceLocationById,\n    editExperienceLocation,\n    createExperienceLocationFormData,\n    editExperienceLocationFormData,\n  }\n}\n"],"names":["useExperienceLocationStore","defineStore","experienceLocationsIndex","ref","setExperienceLocationsIndex","i","addExperienceLocationToIndex","updateExperienceLocationsInIndex","index","experience","resetExperienceLocationsStore","useExperienceLocation","route","useRoute","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","processActionSuccess","resetActionsInSuccess","useUi","storeToRefs","experienceLocationActions","createExperienceLocationFormData","editExperienceLocationFormData","rsp","e","operationalBaseId","experienceLocationData","experienceLocationId"],"mappings":"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"}
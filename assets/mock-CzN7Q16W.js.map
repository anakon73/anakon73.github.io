{"version":3,"file":"mock-CzN7Q16W.js","sources":["../../src/shared/api/booking/mock.ts"],"sourcesContent":["import type { z } from 'zod'\nimport { faker as f } from '@faker-js/faker'\nimport { HttpResponse, http } from 'msw'\n\nimport {\n  type Booking,\n  // BookingPaymentStatus,\n  BookingStatus,\n  type Passenger,\n  type PickupPlace,\n  type ScheduledDeparture,\n  type TourBooking,\n} from '@/shared/types'\nimport { type Handlers, mockUrl, mockUrlParam } from '../lib'\n\nimport {\n  normalizeBooking,\n  normalizeTourBooking,\n} from './normalizers'\nimport type {\n  BookingSchema,\n  MainBookingPassengerSchema,\n  TourBookingSchema,\n} from '../schemas'\nimport { endpoints } from './api'\nimport type { Brand } from '@/shared/lib/utils'\n\nexport function makeMainBookingPassengerSchemaMock(): z.infer<\n  typeof MainBookingPassengerSchema\n> {\n  return {\n    id: f.number.int() as Passenger['id'],\n    name: f.person.fullName(),\n    email: f.datatype.boolean() ? f.internet.email() : null,\n    phone: f.datatype.boolean() ? f.phone.number() : null,\n  }\n}\n\nexport function makePickupPlaceSchemaMock(): PickupPlace {\n  return {\n    id: f.number.int() as PickupPlace['id'],\n    name: f.location.city(),\n  }\n}\n\nexport const makeMainBookingPassengerMock = (): Passenger => {\n  const mockData = makeMainBookingPassengerSchemaMock()\n  return {\n    id: mockData?.id as Brand<number, 'mainBookingPassengerId'>,\n    name: mockData?.name || '',\n    email: mockData?.email || '',\n    phone: mockData?.phone || '',\n  }\n}\n\nexport function makeBookingSchemaMock(): z.infer<typeof BookingSchema> {\n  return {\n    id: f.number.int() as Booking['id'],\n    code: f.finance.bic(),\n    externalReference: f.finance.iban(),\n    mainPassengerBooking: makeMainBookingPassengerSchemaMock(),\n    // paymentStatus: f.helpers.enumValue(BookingPaymentStatus),\n  }\n}\n\nexport const makeBookingMock = (): Booking => normalizeBooking(\n  makeBookingSchemaMock(),\n)\n\nexport function makeTourBookingSchemaMock(): z.infer<typeof TourBookingSchema> {\n  const capacity = f.number.int({ min: 5, max: 15 })\n\n  return {\n    id: f.number.int() as TourBooking['id'],\n    scheduledDepartureId: f.number.int() as ScheduledDeparture['id'],\n    externalId: f.finance.bic(),\n    code: f.finance.bic(),\n    date: f.date.recent().toISOString(),\n    booking: makeBookingSchemaMock(),\n    status: f.helpers.enumValue(BookingStatus),\n    arrivedPassengerCount: f.number.int({ min: 0, max: capacity }),\n    totalPassengerCount: capacity,\n    url: f.datatype.boolean() ? f.internet.url() : null,\n    waiverStatus: f.datatype.boolean(),\n    pickupPlace: makePickupPlaceSchemaMock(),\n  }\n}\n\nexport const makeTourBookingMock = (): TourBooking => normalizeTourBooking(\n  makeTourBookingSchemaMock(),\n)\n\nexport const bookingHandlers: Handlers<typeof endpoints, 'Booking'> = {\n  BookingUpdate: (() => {\n    const { url, method, schema } = endpoints.update\n\n    return http[method](\n      mockUrl(url({ tourBookingId: mockUrlParam(':tourBookingId') })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { data: makeTourBookingSchemaMock() },\n      ),\n    )\n  })(),\n}\n"],"names":["makeMainBookingPassengerSchemaMock","f","makePickupPlaceSchemaMock","makeBookingSchemaMock","makeTourBookingSchemaMock","capacity","BookingStatus","makeTourBookingMock","normalizeTourBooking","bookingHandlers","url","method","schema","endpoints","http","mockUrl","mockUrlParam","HttpResponse"],"mappings":"2NA2BO,SAASA,GAEd,CACO,MAAA,CACL,GAAIC,EAAE,OAAO,IAAI,EACjB,KAAMA,EAAE,OAAO,SAAS,EACxB,MAAOA,EAAE,SAAS,QAAA,EAAYA,EAAE,SAAS,QAAU,KACnD,MAAOA,EAAE,SAAS,QAAA,EAAYA,EAAE,MAAM,SAAW,IAAA,CAErD,CAEO,SAASC,GAAyC,CAChD,MAAA,CACL,GAAID,EAAE,OAAO,IAAI,EACjB,KAAMA,EAAE,SAAS,KAAK,CAAA,CAE1B,CAYO,SAASE,GAAuD,CAC9D,MAAA,CACL,GAAIF,EAAE,OAAO,IAAI,EACjB,KAAMA,EAAE,QAAQ,IAAI,EACpB,kBAAmBA,EAAE,QAAQ,KAAK,EAClC,qBAAsBD,EAAmC,CAAA,CAG7D,CAMO,SAASI,GAA+D,CACvE,MAAAC,EAAWJ,EAAE,OAAO,IAAI,CAAE,IAAK,EAAG,IAAK,EAAA,CAAI,EAE1C,MAAA,CACL,GAAIA,EAAE,OAAO,IAAI,EACjB,qBAAsBA,EAAE,OAAO,IAAI,EACnC,WAAYA,EAAE,QAAQ,IAAI,EAC1B,KAAMA,EAAE,QAAQ,IAAI,EACpB,KAAMA,EAAE,KAAK,OAAA,EAAS,YAAY,EAClC,QAASE,EAAsB,EAC/B,OAAQF,EAAE,QAAQ,UAAUK,CAAa,EACzC,sBAAuBL,EAAE,OAAO,IAAI,CAAE,IAAK,EAAG,IAAKI,EAAU,EAC7D,oBAAqBA,EACrB,IAAKJ,EAAE,SAAS,QAAA,EAAYA,EAAE,SAAS,MAAQ,KAC/C,aAAcA,EAAE,SAAS,QAAQ,EACjC,YAAaC,EAA0B,CAAA,CAE3C,CAEO,MAAMK,EAAsB,IAAmBC,EACpDJ,EAA0B,CAC5B,EAEaK,EAAyD,CACpE,eAAgB,IAAM,CACpB,KAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,OAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CAAE,cAAeM,EAAa,gBAAgB,CAAA,CAAG,CAAC,EAC9D,IAAMC,EAAa,KACjB,CAAE,KAAMb,GAA4B,CACtC,CAAA,CACF,GACC,CACL"}
{"version":3,"file":"Create-enfN_-KQ.js","sources":["../../src/pages/operational-bases/experience-locations/Create.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { nextTick, onBeforeUnmount, onMounted, ref } from 'vue'\nimport type L from 'leaflet'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport { useExperienceLocation } from '@/shared/api/useExperienceLocation'\nimport IconArrowLeft from '@/shared/ui/icons/IconArrowLeft.vue'\nimport { useOperationalBase } from '@/shared/api/operational-bases/useOperationalBase'\nimport { useMap } from '@/shared/lib/composables/useMap'\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst {\n  experienceLocationActions,\n  createExperienceLocation,\n  createExperienceLocationFormData,\n} = useExperienceLocation()\nconst {\n  createMap,\n  addLayersToMap,\n  createExperienceLocationMarker,\n  resetMapView,\n  tidyUpMap,\n} = useMap()\n\nconst { getAllOperationalBasesFromStore } = useOperationalBase()\nconst createExperienceLocationFormElement = ref<HTMLFormElement | null>(null)\n\nconst operationalBase = getAllOperationalBasesFromStore().find(\n  (ob) => ob.id.toString() === createExperienceLocationFormData.value?.operationalBaseId,\n)\n\nconst handleCreateExperienceLocation = async () => {\n  await validateForm(createExperienceLocationFormElement.value, () => createExperienceLocation(createExperienceLocationFormData.value))\n}\n\nlet map: L.Map | null = null\n\nconst handleUpdateMap = () => {\n  map = createMap(\n    Number.parseFloat(operationalBase!.latitude),\n    Number.parseFloat(operationalBase!.longitude),\n  )\n  addLayersToMap(map)\n\n  // Place the initial marker at the center of the map\n  let experienceLocationMarker = createExperienceLocationMarker(\n    Number.parseFloat(operationalBase!.latitude),\n    Number.parseFloat(operationalBase!.longitude),\n  )\n  experienceLocationMarker.addTo(map)\n\n  // TODO - tidy up leaflet types\n  map.on('click', (e) => {\n    createExperienceLocationFormData.value!.latitude = e.latlng.lat.toString()\n    createExperienceLocationFormData.value!.longitude = e.latlng.lng.toString()\n\n    // Remove the previous marker\n    if (experienceLocationMarker) {\n      map!.removeLayer(experienceLocationMarker)\n    }\n\n    // Add a new marker where the map was clicked\n    experienceLocationMarker = createExperienceLocationMarker(\n      e.latlng.lat,\n      e.latlng.lng,\n    )\n    experienceLocationMarker.addTo(map!)\n  })\n\n  // This is important- the map needs to be reset because of the way the\n  // side bar comes in to view. Otherwise the tiles are offset.\n  resetMapView(\n    map,\n    Number.parseFloat(operationalBase!.latitude),\n    Number.parseFloat(operationalBase!.longitude),\n  )\n}\nonMounted(() => {\n  nextTick(() => {\n    setTimeout(() => {\n      handleUpdateMap()\n    }, 400)\n  })\n})\n\nonBeforeUnmount(() => {\n  tidyUpMap(map!)\n})\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <!-- important to increase z index to sit on top of map -->\n      <div class=\"sticky top-0 z-[9999999] flex w-full items-center justify-end gap-x-2 bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(experienceLocationActions.createExperienceLocation)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-if=\"!actionIsInProgress(experienceLocationActions.createExperienceLocation)\"\n          :to=\"{\n            name: $Routes.OperationalBaseEdit,\n            params: { operationalBaseId: createExperienceLocationFormData.operationalBaseId },\n          }\"\n        >\n          <IconArrowLeft class=\"h-5 w-5 fill-blue-400\" />\n        </RouterLink>\n        <RouterLink\n          v-if=\"!actionIsInProgress(experienceLocationActions.createExperienceLocation)\"\n          :to=\"{ name: $Routes.OperationalBases }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        id=\"create_operational_base_form\"\n        ref=\"createExperienceLocationFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"mb-6\">\n          <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n            Create Experience Location.\n          </h3>\n          <p\n            v-if=\"operationalBase\"\n            class=\"mt-1 text-sm text-gray-500\"\n          >\n            Use the form below to create a new Experience Location for {{ operationalBase.name }}.\n          </p>\n        </div>\n\n        <template v-if=\"createExperienceLocationFormData\">\n          <div class=\"grid grid-cols-1 gap-x-4 gap-y-6 pt-6\">\n            <div>\n              <label for=\"experience_location_name\" class=\"block text-sm font-medium text-gray-700\">\n                Experience Location Name\n              </label>\n              <div class=\"mt-1\">\n                <input\n                  id=\"experience_location_name\"\n                  v-model=\"createExperienceLocationFormData.name\"\n                  type=\"text\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  required\n                >\n              </div>\n            </div>\n\n            <div class=\"flex flex-col\">\n              <label class=\"mb-1 block text-sm font-medium text-gray-700\">\n                Location\n              </label>\n              <div\n                id=\"map\"\n                class=\"h-[400px] w-full bg-gray-100\"\n              />\n              <p class=\"text-xs italic text-gray-500\">\n                {{ createExperienceLocationFormData.latitude }}, {{ createExperienceLocationFormData.longitude }}\n              </p>\n            </div>\n          </div>\n\n          <div class=\"relative pt-5\">\n            <div class=\"flex items-center justify-end\">\n              <Transition name=\"alert\">\n                <ActionSuccessAlert\n                  v-if=\"actionIsInSuccess(experienceLocationActions.createExperienceLocation)\"\n                  :action=\"experienceLocationActions.createExperienceLocation\"\n                />\n              </Transition>\n              <Transition name=\"alert\">\n                <ActionErrorAlert\n                  v-if=\"actionIsInError(experienceLocationActions.createExperienceLocation)\"\n                  :action=\"experienceLocationActions.createExperienceLocation\"\n                />\n              </Transition>\n              <div class=\"flex items-center\">\n                <button\n                  class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none hover:bg-blue-700\"\n                  @click.prevent=\"handleCreateExperienceLocation\"\n                >\n                  <span v-if=\"!actionIsInProgress(experienceLocationActions.createExperienceLocation)\">\n                    Save Experience Location\n                  </span>\n                  <ProgressSpinner\n                    v-else\n                    class=\"h-3 w-3 text-white\"\n                  />\n                </button>\n              </div>\n            </div>\n          </div>\n        </template>\n      </form>\n    </div>\n  </RightDrawer>\n</template>\n"],"names":["validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","experienceLocationActions","createExperienceLocation","createExperienceLocationFormData","useExperienceLocation","createMap","addLayersToMap","createExperienceLocationMarker","resetMapView","tidyUpMap","useMap","getAllOperationalBasesFromStore","useOperationalBase","createExperienceLocationFormElement","ref","operationalBase","ob","_a","handleCreateExperienceLocation","map","handleUpdateMap","experienceLocationMarker","e","onMounted","nextTick","onBeforeUnmount"],"mappings":"03HAcA,KAAM,CAAE,aAAAA,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,IAC3E,CACJ,0BAAAC,EACA,yBAAAC,EACA,iCAAAC,GACEC,EAAsB,EACpB,CACJ,UAAAC,EACA,eAAAC,EACA,+BAAAC,EACA,aAAAC,EACA,UAAAC,GACEC,EAAO,EAEL,CAAE,gCAAAC,GAAoCC,IACtCC,EAAsCC,EAA4B,IAAI,EAEtEC,EAAkBJ,IAAkC,KACvDK,GAAO,OAAA,OAAAA,EAAG,GAAG,SAAS,MAAMC,EAAAd,EAAiC,QAAjC,YAAAc,EAAwC,mBAAA,EAGjEC,EAAiC,SAAY,CACjD,MAAMtB,EAAaiB,EAAoC,MAAO,IAAMX,EAAyBC,EAAiC,KAAK,CAAC,CAAA,EAGtI,IAAIgB,EAAoB,KAExB,MAAMC,EAAkB,IAAM,CACtBD,EAAAd,EACJ,OAAO,WAAWU,EAAiB,QAAQ,EAC3C,OAAO,WAAWA,EAAiB,SAAS,CAAA,EAE9CT,EAAea,CAAG,EAGlB,IAAIE,EAA2Bd,EAC7B,OAAO,WAAWQ,EAAiB,QAAQ,EAC3C,OAAO,WAAWA,EAAiB,SAAS,CAAA,EAE9CM,EAAyB,MAAMF,CAAG,EAG9BA,EAAA,GAAG,QAAUG,GAAM,CACrBnB,EAAiC,MAAO,SAAWmB,EAAE,OAAO,IAAI,WAChEnB,EAAiC,MAAO,UAAYmB,EAAE,OAAO,IAAI,WAG7DD,GACFF,EAAK,YAAYE,CAAwB,EAIhBA,EAAAd,EACzBe,EAAE,OAAO,IACTA,EAAE,OAAO,GAAA,EAEXD,EAAyB,MAAMF,CAAI,CAAA,CACpC,EAIDX,EACEW,EACA,OAAO,WAAWJ,EAAiB,QAAQ,EAC3C,OAAO,WAAWA,EAAiB,SAAS,CAAA,CAC9C,EAEF,OAAAQ,EAAU,IAAM,CACdC,EAAS,IAAM,CACb,WAAW,IAAM,CACCJ,KACf,GAAG,CAAA,CACP,CAAA,CACF,EAEDK,EAAgB,IAAM,CACpBhB,EAAUU,CAAI,CAAA,CACf"}
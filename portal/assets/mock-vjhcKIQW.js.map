{"version":3,"file":"mock-vjhcKIQW.js","sources":["../../src/shared/api/user/mock.ts"],"sourcesContent":["import type { z } from 'zod'\nimport { faker as f } from '@faker-js/faker'\nimport { HttpResponse, http } from 'msw'\n\nimport type { User } from '@/shared/types'\nimport { makeArrayMock } from '@/shared/lib/utils'\n\nimport { type Handlers, mockUrl } from '../lib'\nimport type { UserSchema } from '../schemas'\n\nimport { normalizeUser } from './normalizers'\nimport { endpoints } from './api'\n\nexport function makeUserSchemaMock(): z.infer<typeof UserSchema> {\n  return {\n    id: f.number.int() as User['id'],\n    name: f.person.fullName(),\n    email: f.internet.email(),\n    contactNumber: f.phone.number(),\n    avatar: f.image.avatar(),\n  }\n}\n\nexport const makeUserMock = (): User => normalizeUser(makeUserSchemaMock())\n\nexport const userHandlers: Handlers<typeof endpoints, 'User'> = {\n  UserGetAll: (() => {\n    const { url, method, schema } = endpoints.getAll\n\n    return http[method](\n      mockUrl(url),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        {\n          data: makeArrayMock(makeUserSchemaMock, 5).map(\n            (u, idx) => ({ ...u, id: (idx + 1) as User['id'] }),\n          ),\n          meta: { current_page: 1, last_page: 1 },\n        },\n      ),\n    )\n  })(),\n}\n"],"names":["makeUserSchemaMock","f","makeUserMock","normalizeUser","userHandlers","url","method","schema","endpoints","http","mockUrl","HttpResponse","makeArrayMock","u","idx"],"mappings":"sNAaO,SAASA,GAAiD,CACxD,MAAA,CACL,GAAIC,EAAE,OAAO,IAAI,EACjB,KAAMA,EAAE,OAAO,SAAS,EACxB,MAAOA,EAAE,SAAS,MAAM,EACxB,cAAeA,EAAE,MAAM,OAAO,EAC9B,OAAQA,EAAE,MAAM,OAAO,CAAA,CAE3B,CAEO,MAAMC,EAAe,IAAYC,EAAcH,GAAoB,EAE7DI,EAAmD,CAC9D,YAAa,IAAM,CACjB,KAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,OAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,CAAG,EACX,IAAMM,EAAa,KACjB,CACE,KAAMC,EAAcZ,EAAoB,CAAC,EAAE,IACzC,CAACa,EAAGC,KAAS,CAAE,GAAGD,EAAG,GAAKC,EAAM,GAClC,EACA,KAAM,CAAE,aAAc,EAAG,UAAW,CAAE,CACxC,CACF,CAAA,CACF,GACC,CACL"}
{"version":3,"file":"useRole-JNprELZd.js","sources":["../../src/shared/api/stores/role.ts","../../src/shared/api/roles/useRole.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IRole } from '@/shared/types/roles/IRole'\n\nexport const useRolesStore = defineStore('roles', () => {\n  const roles = ref<IRole[]>([])\n\n  function setRoles(i: IRole[]) {\n    roles.value = i\n  }\n\n  function clearRoles() {\n    roles.value = []\n  }\n\n  return {\n    setRoles,\n    roles,\n    clearRoles,\n  }\n})\n","import { storeToRefs } from 'pinia'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useRolesStore } from '@/shared/api/stores/role'\nimport type { IRole } from '@/shared/types/roles/IRole'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { GetResponse } from '@/shared/types/requests/ResponseTypes'\n\nexport function useRole() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n  } = useUi()\n\n  const {\n    setRoles,\n  } = useRolesStore()\n\n  const { roles } = storeToRefs(useRolesStore())\n\n  const roleActions = {\n    getRolesByDepartments: {\n      id: 'getRolesByDepartments',\n      successMessage: 'Roles retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the roles.',\n    } as IAction,\n  }\n\n  const apiGetRolesByDepartments = async (departments: IDepartment[]): Promise<GetResponse<'roles', IRole[]> | undefined> => {\n    resetActionsInError()\n    addToActionsInProgress(roleActions.getRolesByDepartments)\n\n    try {\n      const departmentIds: number[] = []\n      departments?.forEach((department) => {\n        departmentIds.push(department.id)\n      })\n      const rsp = await apiClient.post('/api/roles/get-by-departments', {\n        departmentIds,\n      })\n      removeFromActionsInProgress(roleActions.getRolesByDepartments)\n      return rsp\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(roleActions.getRolesByDepartments, e)\n    }\n  }\n\n  const storeSetRoles = (r: IRole[]) => {\n    setRoles(r)\n  }\n  const storeGetRoles = (): IRole[] => {\n    return roles.value\n  }\n\n  return {\n    apiGetRolesByDepartments,\n    storeGetRoles,\n    storeSetRoles,\n    roleActions,\n  }\n}\n"],"names":["useRolesStore","defineStore","roles","ref","setRoles","i","clearRoles","useRole","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","useUi","storeToRefs","roleActions","departments","departmentIds","department","rsp","e","r"],"mappings":"oJAIa,MAAAA,EAAgBC,EAAY,QAAS,IAAM,CAChD,MAAAC,EAAQC,EAAa,CAAA,CAAE,EAE7B,SAASC,EAASC,EAAY,CAC5BH,EAAM,MAAQG,CAChB,CAEA,SAASC,GAAa,CACpBJ,EAAM,MAAQ,EAChB,CAEO,MAAA,CACL,SAAAE,EACA,MAAAF,EACA,WAAAI,CAAA,CAEJ,CAAC,ECXM,SAASC,GAAU,CAClB,KAAA,CAAE,UAAAC,GAAcC,IAChB,CACJ,uBAAAC,EACA,4BAAAC,EACA,mBAAAC,EACA,oBAAAC,GACEC,EAAM,EAEJ,CACJ,SAAAV,GACEJ,EAAc,EAEZ,CAAE,MAAAE,CAAU,EAAAa,EAAYf,EAAe,CAAA,EAEvCgB,EAAc,CAClB,sBAAuB,CACrB,GAAI,wBACJ,eAAgB,gCAChB,aAAc,2CAChB,CAAA,EA+BK,MAAA,CACL,yBA7B+B,MAAOC,GAAmF,CACrGJ,IACpBH,EAAuBM,EAAY,qBAAqB,EAEpD,GAAA,CACF,MAAME,EAA0B,CAAA,EACnBD,GAAA,MAAAA,EAAA,QAASE,GAAe,CACrBD,EAAA,KAAKC,EAAW,EAAE,CAAA,GAElC,MAAMC,EAAM,MAAMZ,EAAU,KAAK,gCAAiC,CAChE,cAAAU,CAAA,CACD,EACD,OAAAP,EAA4BK,EAAY,qBAAqB,EACtDI,QAEFC,EAAQ,CACb,QAAQ,IAAIA,CAAC,EACMT,EAAAI,EAAY,sBAAuBK,CAAC,CACzD,CAAA,EAYA,cANoB,IACbnB,EAAM,MAMb,cAVqBoB,GAAe,CACpClB,EAASkB,CAAC,CAAA,EAUV,YAAAN,CAAA,CAEJ"}
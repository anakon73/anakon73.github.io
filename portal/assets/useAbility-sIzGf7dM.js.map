{"version":3,"file":"useAbility-sIzGf7dM.js","sources":["../../src/shared/api/stores/ability.ts","../../src/shared/api/abilities/useAbility.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IAbility } from '@/shared/types/abilities/IAbility'\n\nexport const useAbilitiesStore = defineStore('abilities', () => {\n  const abilities = ref<IAbility[]>([])\n\n  function setAbilities(i: IAbility[]) {\n    abilities.value = i\n  }\n\n  function clearAbilities() {\n    abilities.value = []\n  }\n\n  return {\n    setAbilities,\n    abilities,\n    clearAbilities,\n  }\n})\n","import { storeToRefs } from 'pinia'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useAbilitiesStore } from '@/shared/api/stores/ability'\nimport type { IAbility } from '@/shared/types/abilities/IAbility'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { GetResponse } from '@/shared/types/requests/ResponseTypes'\n\nexport function useAbility() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n  } = useUi()\n\n  const {\n    setAbilities,\n  } = useAbilitiesStore()\n\n  const { abilities } = storeToRefs(useAbilitiesStore())\n\n  const abilityActions = {\n    getAbilitiesByDepartments: {\n      id: 'getAbilitiesByDepartments',\n      successMessage: 'Abilities retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the abilities.',\n    } as IAction,\n  }\n\n  const apiGetAbilitiesByDepartments = async (departments: IDepartment[]): Promise<GetResponse<'abilities', IAbility[]> | undefined> => {\n    resetActionsInError()\n    addToActionsInProgress(abilityActions.getAbilitiesByDepartments)\n\n    try {\n      const departmentIds: number[] = []\n      departments?.forEach((department) => {\n        departmentIds.push(department.id)\n      })\n      const rsp = await apiClient.post('/api/abilities/get-by-departments', {\n        departmentIds,\n      })\n      removeFromActionsInProgress(abilityActions.getAbilitiesByDepartments)\n      return rsp\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(abilityActions.getAbilitiesByDepartments, e)\n    }\n  }\n\n  const storeSetAbilities = (a: IAbility[]) => {\n    setAbilities(a)\n  }\n  const storeGetAbilities = (): IAbility[] => {\n    return abilities.value\n  }\n\n  return {\n    apiGetAbilitiesByDepartments,\n    storeGetAbilities,\n    storeSetAbilities,\n    abilityActions,\n  }\n}\n"],"names":["useAbilitiesStore","defineStore","abilities","ref","setAbilities","i","clearAbilities","useAbility","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","useUi","storeToRefs","abilityActions","departments","departmentIds","department","rsp","e","a"],"mappings":"oJAIa,MAAAA,EAAoBC,EAAY,YAAa,IAAM,CACxD,MAAAC,EAAYC,EAAgB,CAAA,CAAE,EAEpC,SAASC,EAAaC,EAAe,CACnCH,EAAU,MAAQG,CACpB,CAEA,SAASC,GAAiB,CACxBJ,EAAU,MAAQ,EACpB,CAEO,MAAA,CACL,aAAAE,EACA,UAAAF,EACA,eAAAI,CAAA,CAEJ,CAAC,ECXM,SAASC,GAAa,CACrB,KAAA,CAAE,UAAAC,GAAcC,IAChB,CACJ,uBAAAC,EACA,4BAAAC,EACA,mBAAAC,EACA,oBAAAC,GACEC,EAAM,EAEJ,CACJ,aAAAV,GACEJ,EAAkB,EAEhB,CAAE,UAAAE,CAAc,EAAAa,EAAYf,EAAmB,CAAA,EAE/CgB,EAAiB,CACrB,0BAA2B,CACzB,GAAI,4BACJ,eAAgB,oCAChB,aAAc,+CAChB,CAAA,EA+BK,MAAA,CACL,6BA7BmC,MAAOC,GAA0F,CAChHJ,IACpBH,EAAuBM,EAAe,yBAAyB,EAE3D,GAAA,CACF,MAAME,EAA0B,CAAA,EACnBD,GAAA,MAAAA,EAAA,QAASE,GAAe,CACrBD,EAAA,KAAKC,EAAW,EAAE,CAAA,GAElC,MAAMC,EAAM,MAAMZ,EAAU,KAAK,oCAAqC,CACpE,cAAAU,CAAA,CACD,EACD,OAAAP,EAA4BK,EAAe,yBAAyB,EAC7DI,QAEFC,EAAQ,CACb,QAAQ,IAAIA,CAAC,EACMT,EAAAI,EAAe,0BAA2BK,CAAC,CAChE,CAAA,EAYA,kBANwB,IACjBnB,EAAU,MAMjB,kBAVyBoB,GAAkB,CAC3ClB,EAAakB,CAAC,CAAA,EAUd,eAAAN,CAAA,CAEJ"}
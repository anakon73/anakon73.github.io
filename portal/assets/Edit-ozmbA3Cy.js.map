{"version":3,"file":"Edit-ozmbA3Cy.js","sources":["../../src/pages/operational-bases/experience-locations/Edit.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { nextTick, onBeforeUnmount, onMounted, ref, toRefs } from 'vue'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport { useExperienceLocation } from '@/shared/api/useExperienceLocation'\nimport IconArrowLeft from '@/shared/ui/icons/IconArrowLeft.vue'\nimport { useMap } from '@/shared/lib/composables/useMap'\n\nconst props = defineProps<{\n  // TODO: Is it used?\n  operationalBaseId: number\n  experienceLocationId: number\n}>()\nconst { experienceLocationId } = toRefs(props)\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst {\n  experienceLocationActions,\n  editExperienceLocation,\n  editExperienceLocationFormData,\n  getExperienceLocationById,\n} = useExperienceLocation()\nconst {\n  createMap,\n  addLayersToMap,\n  createExperienceLocationMarker,\n  resetMapView,\n  tidyUpMap,\n} = useMap()\n\nconst editExperienceLocationFormElement = ref<HTMLFormElement | null>(null)\n\nconst handleEditExperienceLocation = async () => {\n  await validateForm(editExperienceLocationFormElement.value, () => editExperienceLocation(editExperienceLocationFormData.value))\n}\n\nlet map: L.Map | null = null\n\nconst handleUpdateMap = () => {\n  map = createMap(\n    Number.parseFloat(editExperienceLocationFormData.value.latitude),\n    Number.parseFloat(editExperienceLocationFormData.value.longitude),\n  )\n  addLayersToMap(map)\n\n  // Place the initial marker at the center of the map\n  let experienceLocationMarker = createExperienceLocationMarker(\n    Number.parseFloat(editExperienceLocationFormData.value.latitude),\n    Number.parseFloat(editExperienceLocationFormData.value.longitude),\n  )\n  experienceLocationMarker.addTo(map)\n\n  // TODO - tidy up leaflet types\n  map.on('click', (e) => {\n    editExperienceLocationFormData.value!.latitude = e.latlng.lat.toString()\n    editExperienceLocationFormData.value!.longitude = e.latlng.lng.toString()\n\n    // Remove the previous marker\n    if (experienceLocationMarker) {\n      map!.removeLayer(experienceLocationMarker)\n    }\n\n    // Add a new marker where the map was clicked\n    experienceLocationMarker = createExperienceLocationMarker(\n      e.latlng.lat,\n      e.latlng.lng,\n    )\n    experienceLocationMarker.addTo(map!)\n  })\n\n  // This is important- the map needs to be reset because of the way the\n  // side bar comes in to view. Otherwise the tiles are offset.\n  resetMapView(\n    map,\n    Number.parseFloat(editExperienceLocationFormData.value.latitude),\n    Number.parseFloat(editExperienceLocationFormData.value.longitude),\n  )\n}\n\nonMounted(async () => {\n  editExperienceLocationFormData.value = await getExperienceLocationById(\n    experienceLocationId.value.toString(),\n  )\n  await nextTick(() => {\n    setTimeout(() => handleUpdateMap(), 400)\n  })\n})\n\nonBeforeUnmount(() => {\n  tidyUpMap(map!)\n})\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <!-- important to increase z index to sit on top of map -->\n      <div class=\"sticky top-0 z-[9999999] flex w-full items-center justify-end gap-x-2 bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(experienceLocationActions.editExperienceLocation)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-if=\"!actionIsInProgress(experienceLocationActions.editExperienceLocation)\"\n          :to=\"{\n            name: $Routes.OperationalBaseEdit,\n            params: { operationalBaseId: editExperienceLocationFormData.operationalBaseId },\n          }\"\n        >\n          <IconArrowLeft class=\"h-5 w-5 fill-blue-400\" />\n        </RouterLink>\n        <RouterLink\n          v-if=\"!actionIsInProgress(experienceLocationActions.editExperienceLocation)\"\n          :to=\"{ name: $Routes.OperationalBases }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        id=\"create_operational_base_form\"\n        ref=\"editExperienceLocationFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"mb-6\">\n          <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n            Edit Experience Location.\n          </h3>\n          <p class=\"mt-1 text-sm text-gray-500\">\n            Use the form below to edit the Experience Location.\n          </p>\n        </div>\n\n        <template v-if=\"editExperienceLocationFormData\">\n          <div class=\"grid grid-cols-1 gap-x-4 gap-y-6 pt-6\">\n            <div>\n              <label for=\"experience_location_name\" class=\"block text-sm font-medium text-gray-700\">\n                Experience Location Name\n              </label>\n              <div class=\"mt-1\">\n                <input\n                  id=\"experience_location_name\"\n                  v-model=\"editExperienceLocationFormData.name\"\n                  type=\"text\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  required\n                >\n              </div>\n            </div>\n\n            <div class=\"flex flex-col\">\n              <label class=\"mb-1 block text-sm font-medium text-gray-700\">\n                Location\n              </label>\n              <div\n                id=\"map\"\n                class=\"h-[400px] w-full bg-gray-100\"\n              />\n              <p class=\"text-xs italic text-gray-500\">\n                {{ editExperienceLocationFormData.latitude }}, {{ editExperienceLocationFormData.longitude }}\n              </p>\n            </div>\n          </div>\n\n          <div class=\"relative pt-5\">\n            <div class=\"flex items-center justify-end\">\n              <Transition name=\"alert\">\n                <ActionSuccessAlert\n                  v-if=\"actionIsInSuccess(experienceLocationActions.editExperienceLocation)\"\n                  :action=\"experienceLocationActions.editExperienceLocation\"\n                />\n              </Transition>\n              <Transition name=\"alert\">\n                <ActionErrorAlert\n                  v-if=\"actionIsInError(experienceLocationActions.editExperienceLocation)\"\n                  :action=\"experienceLocationActions.editExperienceLocation\"\n                />\n              </Transition>\n              <div class=\"flex items-center\">\n                <button\n                  class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none hover:bg-blue-700\"\n                  @click.prevent=\"handleEditExperienceLocation\"\n                >\n                  <span v-if=\"!actionIsInProgress(experienceLocationActions.editExperienceLocation)\">\n                    Apply Changes\n                  </span>\n                  <ProgressSpinner\n                    v-else\n                    class=\"h-3 w-3 text-white\"\n                  />\n                </button>\n              </div>\n            </div>\n          </div>\n        </template>\n      </form>\n    </div>\n  </RightDrawer>\n</template>\n"],"names":["props","__props","experienceLocationId","toRefs","validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","experienceLocationActions","editExperienceLocation","editExperienceLocationFormData","getExperienceLocationById","useExperienceLocation","createMap","addLayersToMap","createExperienceLocationMarker","resetMapView","tidyUpMap","useMap","editExperienceLocationFormElement","ref","handleEditExperienceLocation","map","handleUpdateMap","experienceLocationMarker","e","onMounted","nextTick","onBeforeUnmount"],"mappings":"i8HAYA,MAAMA,EAAQC,EAKR,CAAE,qBAAAC,CAAA,EAAyBC,EAAOH,CAAK,EAEvC,CAAE,aAAAI,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,IAC3E,CACJ,0BAAAC,EACA,uBAAAC,EACA,+BAAAC,EACA,0BAAAC,GACEC,EAAsB,EACpB,CACJ,UAAAC,EACA,eAAAC,EACA,+BAAAC,EACA,aAAAC,EACA,UAAAC,GACEC,EAAO,EAELC,EAAoCC,EAA4B,IAAI,EAEpEC,EAA+B,SAAY,CAC/C,MAAMlB,EAAagB,EAAkC,MAAO,IAAMV,EAAuBC,EAA+B,KAAK,CAAC,CAAA,EAGhI,IAAIY,EAAoB,KAExB,MAAMC,EAAkB,IAAM,CACtBD,EAAAT,EACJ,OAAO,WAAWH,EAA+B,MAAM,QAAQ,EAC/D,OAAO,WAAWA,EAA+B,MAAM,SAAS,CAAA,EAElEI,EAAeQ,CAAG,EAGlB,IAAIE,EAA2BT,EAC7B,OAAO,WAAWL,EAA+B,MAAM,QAAQ,EAC/D,OAAO,WAAWA,EAA+B,MAAM,SAAS,CAAA,EAElEc,EAAyB,MAAMF,CAAG,EAG9BA,EAAA,GAAG,QAAUG,GAAM,CACrBf,EAA+B,MAAO,SAAWe,EAAE,OAAO,IAAI,WAC9Df,EAA+B,MAAO,UAAYe,EAAE,OAAO,IAAI,WAG3DD,GACFF,EAAK,YAAYE,CAAwB,EAIhBA,EAAAT,EACzBU,EAAE,OAAO,IACTA,EAAE,OAAO,GAAA,EAEXD,EAAyB,MAAMF,CAAI,CAAA,CACpC,EAIDN,EACEM,EACA,OAAO,WAAWZ,EAA+B,MAAM,QAAQ,EAC/D,OAAO,WAAWA,EAA+B,MAAM,SAAS,CAAA,CAClE,EAGF,OAAAgB,EAAU,SAAY,CACpBhB,EAA+B,MAAQ,MAAMC,EAC3CV,EAAqB,MAAM,SAAS,CAAA,EAEtC,MAAM0B,EAAS,IAAM,CACR,WAAA,IAAMJ,IAAmB,GAAG,CAAA,CACxC,CAAA,CACF,EAEDK,EAAgB,IAAM,CACpBX,EAAUK,CAAI,CAAA,CACf"}
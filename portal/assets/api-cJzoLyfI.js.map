{"version":3,"file":"api-cJzoLyfI.js","sources":["../../src/shared/api/vehicle/normalizers.ts","../../src/shared/api/vehicle/api.ts"],"sourcesContent":["import type { z } from 'zod'\nimport { objectPick } from '@antfu/utils'\n\nimport type { Vehicle } from '@/shared/types'\nimport type { VehicleSchema } from '../schemas'\n\nexport function normalizeVehicle(\n  vehicle: z.infer<typeof VehicleSchema>,\n): Vehicle {\n  return objectPick(vehicle, ['id', 'title', 'registrationNumber', 'maxCapacity'])\n}\n","import {\n  type ApiEndpointsAndSchemas,\n  PaginatedResponse,\n  client,\n  definePaginatedFetcher,\n} from '../lib'\n\nimport { VehicleSchema } from '../schemas'\nimport { normalizeVehicle } from './normalizers'\n\nexport const endpoints = {\n  getAll: {\n    url: '/v1/vehicles',\n    method: 'get',\n    schema: PaginatedResponse(VehicleSchema),\n  },\n} satisfies ApiEndpointsAndSchemas\n\nexport { endpoints as vehiclesEndpoints }\n\nexport const getVehicles = definePaginatedFetcher(async (page) => {\n  const { url, method, schema } = endpoints.getAll\n\n  const queryParams = new URLSearchParams({ page: page.toString() }).toString()\n\n  const { data, ...rest } = await client[method](`${url}?${queryParams}`, schema)\n\n  return { data: data.map(normalizeVehicle), ...rest }\n})\n"],"names":["normalizeVehicle","vehicle","objectPick","endpoints","PaginatedResponse","VehicleSchema","getVehicles","definePaginatedFetcher","page","url","method","schema","queryParams","data","rest","client"],"mappings":"uGAMO,SAASA,EACdC,EACS,CACT,OAAOC,EAAWD,EAAS,CAAC,KAAM,QAAS,qBAAsB,aAAa,CAAC,CACjF,CCAO,MAAME,EAAY,CACvB,OAAQ,CACN,IAAK,eACL,OAAQ,MACR,OAAQC,EAAkBC,CAAa,CACzC,CACF,EAIaC,EAAcC,EAAuB,MAAOC,GAAS,CAChE,KAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWR,EAAU,OAEpCS,EAAc,IAAI,gBAAgB,CAAE,KAAMJ,EAAK,SAAS,CAAA,CAAG,EAAE,WAE7D,CAAE,KAAAK,EAAM,GAAGC,CAAA,EAAS,MAAMC,EAAOL,CAAM,EAAE,GAAGD,CAAG,IAAIG,CAAW,GAAID,CAAM,EAE9E,MAAO,CAAE,KAAME,EAAK,IAAIb,CAAgB,EAAG,GAAGc,EAChD,CAAC"}
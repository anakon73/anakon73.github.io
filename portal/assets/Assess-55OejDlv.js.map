{"version":3,"file":"Assess-55OejDlv.js","sources":["../../src/pages/staff/Assess.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { onMounted, ref, toRefs, watch } from 'vue'\nimport { ChatBubbleLeftEllipsisIcon } from '@heroicons/vue/20/solid'\nimport { Switch } from '@headlessui/vue'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport { useUser } from '@/shared/api/useUser'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport FeedbackWarning from '@/shared/ui/FeedbackWarning.vue'\nimport { useHelpers } from '@/shared/lib/utils/useHelpers'\nimport IconSchool from '@/shared/ui/icons/IconSchool.vue'\nimport { useAssessment } from '@/shared/api/useAssessment'\nimport IconTickMarkCircle from '@/shared/ui/icons/IconTickMarkCircle.vue'\nimport IconCloseCircle from '@/shared/ui/icons/IconCloseCircle.vue'\nimport type { IAssessUserFormData } from '@/shared/types/user/IAssessUserFormData'\nimport IconDeleteCircle from '@/shared/ui/icons/IconDeleteCircle.vue'\nimport type { IAssessment, IAssessmentCriteria, IAssessmentLog } from '@/shared/types/assessments/IAssessment'\n\nconst props = defineProps<{ userId: number }>()\nconst { userId } = toRefs(props)\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst {\n  getAllAssessmentsByUserAbility,\n  getAllAssessmentLogsByUserId,\n  assessUser,\n  deleteAssessmentLog,\n  assessmentActions,\n} = useAssessment()\nconst { getCurrentDateInYmdFormat } = useHelpers()\nconst { user } = useUser()\n\nconst assessUserFormElement = ref<HTMLFormElement | null>(null)\nconst allAssessmentsByUserAbility = ref<IAssessment[]>([])\nconst formattedDate = getCurrentDateInYmdFormat()\nconst allAssessmentLogsByUserAbility = ref<IAssessmentLog[]>([])\nconst visibleLogs = ref<number[]>([])\n\nconst assessUserFormData = ref<IAssessUserFormData>({\n  user: {\n    id: null,\n    fullName: null,\n  },\n  date: formattedDate,\n  assessment: null,\n  feedback: '',\n  assessor_id: user.value!.id,\n  pass: false,\n})\n\nconst selectedAssessment = ref<IAssessment | null>(null)\nconst confirmDeleteAssessmentLogModalIsOpen = ref(false)\nconst assessmentLogToDelete = ref(0)\n\nconst handleConfirmDeleteAssessmentLogModel = (assessmentLogId: number) => {\n  assessmentLogToDelete.value = assessmentLogId\n  confirmDeleteAssessmentLogModalIsOpen.value = true\n}\n\nconst handleFormSubmission = async () => {\n  await validateForm(assessUserFormElement.value, async () => {\n    await assessUser(assessUserFormData.value)\n    const r = await getAllAssessmentLogsByUserId(Number.parseInt(userId.value.toString()))\n    allAssessmentLogsByUserAbility.value = r.assessmentLogs\n    assessUserFormData.value.user = r.user\n    selectedAssessment.value = null\n    visibleLogs.value = []\n  })\n}\n\nconst handleDeleteAssessmentLog = async (assessmentLogId: number) => {\n  await deleteAssessmentLog(assessmentLogId)\n  const r = await getAllAssessmentLogsByUserId(Number.parseInt(userId.value.toString()))\n  allAssessmentLogsByUserAbility.value = r.assessmentLogs\n  assessUserFormData.value.user = r.user\n  confirmDeleteAssessmentLogModalIsOpen.value = false\n}\n\nonMounted(async () => {\n  const [getAllAssessmentsByUserAbilityResult, getAllAssessmentLogsByUserIdResult] = await Promise.all([\n    getAllAssessmentsByUserAbility(),\n    getAllAssessmentLogsByUserId(Number.parseInt(userId.value.toString())),\n  ])\n\n  if (getAllAssessmentsByUserAbilityResult) {\n    allAssessmentsByUserAbility.value = getAllAssessmentsByUserAbilityResult\n  }\n  allAssessmentLogsByUserAbility.value = getAllAssessmentLogsByUserIdResult.assessmentLogs\n  assessUserFormData.value.user = getAllAssessmentLogsByUserIdResult.user\n})\n\nwatch(selectedAssessment, (newSelectedAssessment) => {\n  if (newSelectedAssessment) {\n    assessUserFormData.value.feedback = ''\n    assessUserFormData.value.assessment = {\n      ...newSelectedAssessment,\n      criteria: newSelectedAssessment.criteria.map((criterion: IAssessmentCriteria) => {\n        return {\n          ...criterion,\n          pass: false,\n        }\n      }),\n    }\n  }\n  else {\n    assessUserFormData.value.assessment = null\n  }\n})\n\nwatch(userId, async (newId, oldId) => {\n  /**\n   * When navigating away, the staffIdFromRouteParam will be null.\n   * Check for this and don't do anything if it is null to avoid errors.\n   */\n  if (userId.value) {\n    if (userId.value !== oldId) {\n      const data = await getAllAssessmentLogsByUserId(Number.parseInt(userId.value.toString()))\n      allAssessmentLogsByUserAbility.value = data.assessmentLogs\n      assessUserFormData.value = {\n        user: data.user,\n        date: formattedDate,\n        assessment: null,\n        feedback: '',\n        assessor_id: user.value!.id,\n        pass: false,\n      }\n      selectedAssessment.value = null\n    }\n  }\n})\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <div class=\"sticky top-0 z-10 flex w-full items-center justify-end bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(assessmentActions.getAllAssessmentsByUserAbility) || actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-else\n          :to=\"{ name: $Routes.Staff }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        id=\"assess_user_form\"\n        ref=\"assessUserFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"space-y-8 divide-y divide-gray-200\">\n          <div>\n            <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n              Log assessment.\n            </h3>\n            <p class=\"mt-1 text-sm text-gray-500\">\n              Use the form below to create a new Assessment Log for <span class=\"font-medium\">{{ assessUserFormData.user.fullName }}</span>.\n            </p>\n          </div>\n\n          <div class=\"flex flex-col space-y-6 pt-6\">\n            <div class=\"flex flex-wrap space-y-6 sm:space-x-3 sm:space-y-0\">\n              <div>\n                <label for=\"date\" class=\"block text-sm font-medium text-gray-700\">\n                  Date\n                </label>\n                <input\n                  id=\"date\"\n                  v-model=\"assessUserFormData.date\"\n                  type=\"date\"\n                  name=\"date\"\n                  class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                >\n              </div>\n              <div class=\"w-full sm:flex-1\">\n                <label for=\"assessment\" class=\"block text-sm font-medium text-gray-700\">\n                  Assessment\n                </label>\n                <select\n                  id=\"assessment\"\n                  v-model=\"selectedAssessment\"\n                  name=\"assessment\"\n                  class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                >\n                  <option disabled selected value=\"null\">\n                    Select assessment...\n                  </option>\n                  <option\n                    v-for=\"assessment in allAssessmentsByUserAbility\"\n                    :key=\"assessment.id\"\n                    :value=\"assessment\"\n                  >\n                    {{ assessment.name }}\n                  </option>\n                </select>\n              </div>\n            </div>\n            <div\n              v-if=\"assessUserFormData.assessment\"\n              class=\"flex flex-col space-y-2 sm:col-span-3\"\n            >\n              <label for=\"feedback\" class=\"block text-sm font-medium text-gray-700\">\n                Criteria\n              </label>\n              <div\n                v-for=\"criterion in assessUserFormData.assessment.criteria\"\n                :key=\"criterion.id\"\n                class=\"flex w-full items-start justify-between\"\n              >\n                <p class=\"text-sm text-gray-700\">\n                  {{ criterion.criteria }}\n                </p>\n\n                <div class=\"flex w-24 justify-end\">\n                  <Switch\n                    v-model=\"criterion.pass\"\n                    :class=\"criterion.pass ? 'bg-green-600' : 'bg-gray-200'\"\n                    class=\"relative inline-flex h-6 w-11 items-center rounded-full\"\n                  >\n                    <span\n                      :class=\"criterion.pass ? 'translate-x-6' : 'translate-x-1'\"\n                      class=\"inline-block h-4 w-4 rounded-full bg-white transition\"\n                    />\n                  </Switch>\n                </div>\n              </div>\n            </div>\n            <div\n              v-if=\"assessUserFormData.assessment\"\n              class=\"sm:col-span-3\"\n            >\n              <label for=\"feedback\" class=\"block text-sm font-medium text-gray-700\">\n                Feedback or additional comments\n                <span\n                  class=\"text-xs font-normal text-gray-400\"\n                  v-html=\"`(from ${user?.fullName})`\"\n                />\n              </label>\n              <textarea\n                id=\"feedback\"\n                v-model=\"assessUserFormData.feedback\"\n                name=\"feedback\"\n                rows=\"8\"\n                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                required\n              />\n            </div>\n            <div\n              v-if=\"assessUserFormData.assessment\"\n              class=\"w-full sm:flex-1\"\n            >\n              <label for=\"verdict\" class=\"block text-sm font-medium text-gray-700\">\n                Overall Verdict\n              </label>\n              <select\n                id=\"verdict\"\n                v-model=\"assessUserFormData.pass\"\n                name=\"verdict\"\n                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n              >\n                <option :value=\"true\">\n                  Pass\n                </option>\n                <option :value=\"false\">\n                  Fail\n                </option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"relative pt-5\">\n          <div class=\"flex items-center justify-end\">\n            <Transition name=\"alert\">\n              <ActionSuccessAlert\n                v-if=\"actionIsInSuccess(assessmentActions.assessUser)\"\n                :action=\"assessmentActions.assessUser\"\n              />\n            </Transition>\n            <Transition name=\"alert\">\n              <ActionErrorAlert\n                v-if=\"actionIsInError(assessmentActions.assessUser)\"\n                :action=\"assessmentActions.assessUser\"\n              />\n            </Transition>\n            <div class=\"flex items-center\">\n              <button\n                :disabled=\"actionIsInProgress(assessmentActions.getAllAssessmentsByUserAbility) || actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId) || actionIsInProgress(assessmentActions.assessUser)\"\n                class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none disabled:cursor-not-allowed hover:bg-blue-700\"\n                @click.prevent=\"handleFormSubmission\"\n              >\n                <span v-if=\"!actionIsInProgress(assessmentActions.getAllAssessmentsByUserAbility) && !actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId) && !actionIsInProgress(assessmentActions.assessUser)\">\n                  Save\n                </span>\n                <ProgressSpinner\n                  v-else\n                  class=\"h-3 w-3 text-white\"\n                />\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div class=\"w-full space-y-8 divide-y divide-gray-200 px-6 pt-12 md:px-12\">\n        <div class=\"space-y-8 divide-y divide-gray-200\">\n          <div class=\"flex items-center justify-between\">\n            <div>\n              <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n                Previous assessment logs.\n              </h3>\n              <p class=\"mt-1 text-sm text-gray-500\">\n                Below are the previous assessment logs for <span class=\"font-medium\">{{ assessUserFormData.user.fullName }}</span>.\n              </p>\n            </div>\n            <ProgressSpinner\n              v-if=\"actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId)\"\n              class=\"h-5 w-5 text-blue-500\"\n            />\n          </div>\n\n          <div\n            v-if=\"!actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId) && allAssessmentLogsByUserAbility.length\"\n            class=\"flex flex-col space-y-3 pt-6\"\n          >\n            <div class=\"flow-root\">\n              <ul role=\"list\" class=\"-mb-8\">\n                <li\n                  v-for=\"(assessmentLog, assessmentLogItemIdx) in allAssessmentLogsByUserAbility\"\n                  :key=\"assessmentLog.id\"\n                >\n                  <div class=\"relative pb-8\">\n                    <span\n                      v-if=\"assessmentLogItemIdx !== allAssessmentLogsByUserAbility.length - 1\"\n                      class=\"absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200\"\n                      aria-hidden=\"true\"\n                    />\n                    <div class=\"relative flex items-start space-x-3\">\n                      <template v-if=\"assessmentLog.feedback\">\n                        <div class=\"relative\">\n                          <div\n                            class=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\"\n                            :class=\"[\n                              { 'bg-green-100': assessmentLog.pass },\n                              { 'bg-red-100': !assessmentLog.pass },\n                            ]\"\n                          >\n                            <IconTickMarkCircle\n                              v-if=\"assessmentLog.pass\"\n                              class=\"h-5 w-5 fill-green-500\"\n                            />\n                            <IconCloseCircle\n                              v-else\n                              class=\"h-5 w-5 fill-red-500\"\n                            />\n                          </div>\n                          <span class=\"absolute -bottom-0.5 -right-0.5 rounded-tl bg-white px-0.5 py-px\">\n                            <ChatBubbleLeftEllipsisIcon class=\"h-4 w-4 text-gray-400\" aria-hidden=\"true\" />\n                          </span>\n                        </div>\n                        <div class=\"min-w-0 flex-1\">\n                          <div>\n                            <div class=\"text-sm\">\n                              <p class=\"font-medium text-gray-900\">\n                                {{ assessmentLog.assessment_name }} <span class=\"text-xs text-gray-400\">(with {{ assessmentLog.assessor.fullName }})</span>\n                              </p>\n                            </div>\n                            <p class=\"mt-0.5 text-sm text-gray-500\">\n                              Assessment date: <span class=\"text-xs\">{{ assessmentLog.assessment_date }}</span>\n                            </p>\n                          </div>\n                          <div class=\"mt-2 text-sm text-gray-700\">\n                            <p class=\"italic\">\n                              - \"{{ assessmentLog.feedback }}\"\n                            </p>\n                          </div>\n                          <div>\n                            <button\n                              v-if=\"!visibleLogs.includes(assessmentLogItemIdx) && assessmentLog.criteria.length\"\n                              class=\"text-sm\"\n                              @click=\"visibleLogs.push(assessmentLogItemIdx)\"\n                            >\n                              Show criteria\n                            </button>\n                            <div v-if=\"visibleLogs.includes(assessmentLogItemIdx)\" class=\"mt-2 text-sm text-gray-700\">\n                              <ul class=\"space-y-2\">\n                                <li\n                                  v-for=\"criteria in assessmentLog.criteria\"\n                                  :key=\"criteria.id\"\n                                  class=\"flex items-start justify-between\"\n                                >\n                                  <span class=\"pr-2 text-sm text-gray-500\">\n                                    {{ criteria.criteria }}\n                                  </span>\n                                  <IconTickMarkCircle\n                                    v-if=\"criteria.pass\"\n                                    class=\"h-5 w-5 shrink-0 fill-green-500\"\n                                  />\n                                  <IconCloseCircle\n                                    v-else\n                                    class=\"h-5 w-5 shrink-0 fill-red-500\"\n                                  />\n                                </li>\n                              </ul>\n                            </div>\n                          </div>\n                        </div>\n                      </template>\n                      <template v-else-if=\"!assessmentLog.feedback\">\n                        <div>\n                          <div class=\"relative px-1\">\n                            <div class=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\">\n                              <IconSchool class=\"h-5 w-5 fill-gray-500\" aria-hidden=\"true\" />\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"min-w-0 flex-1 py-1.5\">\n                          <div class=\"text-sm text-gray-500\">\n                            <p\n                              v-if=\"assessmentLog.feedback\"\n                              class=\"font-medium text-gray-900\"\n                            >\n                              {{ assessmentLog.assessment_name }} <span class=\"text-xs text-gray-400\">(with {{ assessmentLog.assessor.fullName }})</span>\n                            </p>\n                            <p\n                              v-else\n                              class=\"font-medium text-gray-900\"\n                            >\n                              {{ assessmentLog.assessment_name }}\n                            </p>\n                            Assessment date:\n                            <span class=\"whitespace-nowrap text-xs\">\n                              {{ assessmentLog.assessment_date }}\n                            </span>\n                          </div>\n                        </div>\n                      </template>\n                      <button\n                        class=\"group\"\n                        @click=\"handleConfirmDeleteAssessmentLogModel(assessmentLog.id)\"\n                      >\n                        <IconDeleteCircle\n                          v-if=\"!actionIsInProgress({\n                            id: `deleteAssessmentLog-${assessmentLog.id.toString()}`,\n                            successMessage: 'Assessment log deleted successfully.',\n                            errorMessage: 'Failed to delete assessment log.',\n                          })\"\n                          class=\"h-5 w-5 fill-red-400 group-hover:fill-red-600\"\n                        />\n                        <ProgressSpinner\n                          v-else\n                          class=\"h-5 w-5 text-red-400 group-hover:text-red-600\"\n                        />\n                      </button>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <FeedbackWarning\n            v-else-if=\"!actionIsInProgress(assessmentActions.getAllAssessmentLogsByUserId) && !actionIsInProgress(assessmentActions.getAllAssessmentsByUserAbility)\"\n            :title=\"`There are no assessment logs for ${assessUserFormData.user.fullName}`\"\n            message=\"Use the form above to add a new assessment log.\"\n          />\n\n          <Teleport to=\"#modal\">\n            <Transition>\n              <div\n                v-if=\"confirmDeleteAssessmentLogModalIsOpen\"\n                class=\"pointer-events-auto fixed inset-0 isolate flex items-center justify-center overflow-x-auto bg-black/50\"\n                @click=\"confirmDeleteAssessmentLogModalIsOpen = false\"\n              >\n                <div class=\"rounded-md bg-white shadow sm:rounded-lg\">\n                  <div class=\"px-4 py-5 sm:p-6\">\n                    <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n                      Are you sure?\n                    </h3>\n                    <div class=\"mt-5 flex space-x-2\">\n                      <button\n                        type=\"button\"\n                        class=\"inline-flex items-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-500 hover:bg-red-500\"\n                        @click=\"confirmDeleteAssessmentLogModalIsOpen = false\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 hover:bg-blue-500\"\n                        @click=\"handleDeleteAssessmentLog(assessmentLogToDelete)\"\n                      >\n                        Confirm\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Transition>\n          </Teleport>\n        </div>\n      </div>\n    </div>\n  </RightDrawer>\n</template>\n\n<style scoped>\n.alert-enter-active,\n.alert-leave-active {\n  transition: all 0.5s cubic-bezier(0, 1.3, 1, 1.05);\n}\n\n.alert-enter-from {\n  opacity: 0;\n  transform: translateX(-300px);\n}\n.alert-leave-to {\n  opacity: 0;\n}\n</style>\n"],"names":["props","__props","userId","toRefs","validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","getAllAssessmentsByUserAbility","getAllAssessmentLogsByUserId","assessUser","deleteAssessmentLog","assessmentActions","useAssessment","getCurrentDateInYmdFormat","useHelpers","user","useUser","assessUserFormElement","ref","allAssessmentsByUserAbility","formattedDate","allAssessmentLogsByUserAbility","visibleLogs","assessUserFormData","selectedAssessment","confirmDeleteAssessmentLogModalIsOpen","assessmentLogToDelete","handleConfirmDeleteAssessmentLogModel","assessmentLogId","handleFormSubmission","r","handleDeleteAssessmentLog","onMounted","getAllAssessmentsByUserAbilityResult","getAllAssessmentLogsByUserIdResult","watch","newSelectedAssessment","criterion","newId","oldId","data"],"mappings":"g1MAqBA,MAAMA,EAAQC,EACR,CAAE,OAAAC,CAAA,EAAWC,GAAOH,CAAK,EAEzB,CAAE,aAAAI,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,KAC3E,CACJ,+BAAAC,EACA,6BAAAC,EACA,WAAAC,EACA,oBAAAC,EACA,kBAAAC,GACEC,GAAc,EACZ,CAAE,0BAAAC,GAA8BC,KAChC,CAAE,KAAAC,GAASC,KAEXC,EAAwBC,EAA4B,IAAI,EACxDC,EAA8BD,EAAmB,CAAA,CAAE,EACnDE,EAAgBP,IAChBQ,EAAiCH,EAAsB,CAAA,CAAE,EACzDI,EAAcJ,EAAc,CAAA,CAAE,EAE9BK,EAAqBL,EAAyB,CAClD,KAAM,CACJ,GAAI,KACJ,SAAU,IACZ,EACA,KAAME,EACN,WAAY,KACZ,SAAU,GACV,YAAaL,EAAK,MAAO,GACzB,KAAM,EAAA,CACP,EAEKS,EAAqBN,EAAwB,IAAI,EACjDO,EAAwCP,EAAI,EAAK,EACjDQ,EAAwBR,EAAI,CAAC,EAE7BS,GAAyCC,GAA4B,CACzEF,EAAsB,MAAQE,EAC9BH,EAAsC,MAAQ,EAAA,EAG1CI,GAAuB,SAAY,CACjC,MAAA3B,EAAae,EAAsB,MAAO,SAAY,CACpD,MAAAR,EAAWc,EAAmB,KAAK,EACnC,MAAAO,EAAI,MAAMtB,EAA6B,OAAO,SAASR,EAAO,MAAM,SAAU,CAAA,CAAC,EACrFqB,EAA+B,MAAQS,EAAE,eACtBP,EAAA,MAAM,KAAOO,EAAE,KAClCN,EAAmB,MAAQ,KAC3BF,EAAY,MAAQ,EAAC,CACtB,CAAA,EAGGS,GAA4B,MAAOH,GAA4B,CACnE,MAAMlB,EAAoBkB,CAAe,EACnC,MAAAE,EAAI,MAAMtB,EAA6B,OAAO,SAASR,EAAO,MAAM,SAAU,CAAA,CAAC,EACrFqB,EAA+B,MAAQS,EAAE,eACtBP,EAAA,MAAM,KAAOO,EAAE,KAClCL,EAAsC,MAAQ,EAAA,EAGhD,OAAAO,GAAU,SAAY,CACpB,KAAM,CAACC,EAAsCC,CAAkC,EAAI,MAAM,QAAQ,IAAI,CACnG3B,EAA+B,EAC/BC,EAA6B,OAAO,SAASR,EAAO,MAAM,SAAA,CAAU,CAAC,CAAA,CACtE,EAEGiC,IACFd,EAA4B,MAAQc,GAEtCZ,EAA+B,MAAQa,EAAmC,eACvDX,EAAA,MAAM,KAAOW,EAAmC,IAAA,CACpE,EAEKC,EAAAX,EAAqBY,GAA0B,CAC/CA,GACFb,EAAmB,MAAM,SAAW,GACpCA,EAAmB,MAAM,WAAa,CACpC,GAAGa,EACH,SAAUA,EAAsB,SAAS,IAAKC,IACrC,CACL,GAAGA,EACH,KAAM,EAAA,EAET,CAAA,GAIHd,EAAmB,MAAM,WAAa,IACxC,CACD,EAEKY,EAAAnC,EAAQ,MAAOsC,EAAOC,IAAU,CAKpC,GAAIvC,EAAO,OACLA,EAAO,QAAUuC,EAAO,CACpB,MAAAC,EAAO,MAAMhC,EAA6B,OAAO,SAASR,EAAO,MAAM,SAAU,CAAA,CAAC,EACxFqB,EAA+B,MAAQmB,EAAK,eAC5CjB,EAAmB,MAAQ,CACzB,KAAMiB,EAAK,KACX,KAAMpB,EACN,WAAY,KACZ,SAAU,GACV,YAAaL,EAAK,MAAO,GACzB,KAAM,EAAA,EAERS,EAAmB,MAAQ,IAC7B,CACF,CACD"}
{"version":3,"file":"useOperationalBase-kvvO22e1.js","sources":["../../src/shared/api/stores/operationalBase.ts","../../src/shared/api/operational-bases/useAPIOperationalBase.ts","../../src/shared/api/operational-bases/useOperationalBase.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IOperationalBase } from '@/shared/types/operational-bases/IOperationalBase'\n\nexport const useOperationalBasesStore = defineStore('operationalBases', () => {\n  const storeOperationalBases = ref<IOperationalBase[]>([])\n\n  function storeSetOperationalBases(operationalBases: IOperationalBase[]) {\n    storeOperationalBases.value = operationalBases\n  }\n\n  function storeAddOperationalBase(operationalBase: IOperationalBase) {\n    storeOperationalBases.value.push(operationalBase)\n  }\n\n  function storeRemoveOperationalBase(operationalBaseId: number) {\n    const index = storeOperationalBases.value.findIndex(\n      (ob) => ob.id === operationalBaseId,\n    )\n    if (index !== -1) {\n      storeOperationalBases.value.splice(index, 1)\n    }\n  }\n\n  function storeUpdateOperationalBases(operationalBase: IOperationalBase) {\n    const index = storeOperationalBases.value.findIndex(\n      (ob) => ob.id === operationalBase.id,\n    )\n    storeOperationalBases.value[index] = operationalBase\n  }\n\n  function storeClearOperationalBases() {\n    storeOperationalBases.value = []\n  }\n\n  return {\n    storeOperationalBases,\n    storeSetOperationalBases,\n    storeAddOperationalBase,\n    storeRemoveOperationalBase,\n    storeUpdateOperationalBases,\n    storeClearOperationalBases,\n  }\n})\n","import type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport type { CreateOperationalBaseDTO } from '@/shared/types/operational-bases/OperationalBaseDTOs'\nimport type { IOperationalBase } from '@/shared/types/operational-bases/IOperationalBase'\n\nexport function useAPIOperationalBase() {\n  const { apiClient } = useApiClient()\n\n  const operationalBaseActions = {\n    getAllOperationalBases: {\n      id: 'getAllOperationalBases',\n      successMessage: 'Operational bases retrieved successfully.',\n      errorMessage: 'Failed to retrieve operational bases.',\n    } as IAction,\n    getOperationalBasesByDepartments: {\n      id: 'getOperationalBasesByDepartments',\n      successMessage: 'Operational bases retrieved successfully.',\n      errorMessage: 'Failed to retrieve operational bases.',\n    } as IAction,\n    createOperationalBase: {\n      id: 'createOperationalBase',\n      successMessage: 'Operational base created successfully.',\n      errorMessage: 'Failed to create operational base.',\n    } as IAction,\n    getOperationalBaseById: {\n      id: 'getOperationalBaseById',\n      successMessage: 'Operational base retrieved successfully.',\n      errorMessage: 'Failed to retrieve operational base.',\n    } as IAction,\n    editOperationalBase: {\n      id: 'editOperationalBase',\n      successMessage: 'Operational base edited successfully.',\n      errorMessage: 'Failed to edit operational base.',\n    },\n    getOpsBaseStatsData: {\n      id: 'getOpsBaseStatsData',\n      successMessage: 'Operational bases statistics retrieved successfully.',\n      errorMessage: 'Failed to retrieve operational bases statistics.',\n    },\n    getPreviousOpsBaseStatsData: {\n      id: 'getPreviousOpsBaseStatsData',\n      successMessage: 'Operational bases statistics retrieved successfully.',\n      errorMessage: 'Failed to retrieve operational bases statistics.',\n    },\n  }\n\n  const apiCreateOperationalBase = async (operationalBaseData: CreateOperationalBaseDTO): Promise<IOperationalBase> => {\n    const rsp = await apiClient.post('/api/operational-base', operationalBaseData)\n    return rsp.data.operationalBase\n  }\n\n  return {\n    operationalBaseActions,\n    apiCreateOperationalBase,\n  }\n}\n","import { storeToRefs } from 'pinia'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useOperationalBasesStore } from '@/shared/api/stores/operationalBase'\nimport type { GETResponse } from '@/shared/types/http-client/Responses'\nimport type { IOperationalBase } from '@/shared/types/operational-bases/IOperationalBase'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { CreateOperationalBaseDTO, EditOperationalBaseDTO } from '@/shared/types/operational-bases/OperationalBaseDTOs'\nimport { useAPIOperationalBase } from '@/shared/api/operational-bases/useAPIOperationalBase'\nimport type { GetResponse } from '@/shared/types/requests/ResponseTypes'\n\nimport type { IOperationalBaseStats } from '@/shared/types/dashboard/ops-base-statistics/IOperationalBaseStats'\nimport type { GetOpsBaseStatsDataDTO } from '@/shared/types/dashboard/ops-base-statistics/OpsBaseStatsDTOs'\n\nexport function useOperationalBase() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n    processActionSuccess,\n    resetActionsInSuccess,\n  } = useUi()\n\n  const {\n    operationalBaseActions,\n    apiCreateOperationalBase,\n  } = useAPIOperationalBase()\n\n  const {\n    storeClearOperationalBases,\n    storeUpdateOperationalBases,\n  } = useOperationalBasesStore()\n\n  const {\n    storeOperationalBases,\n  } = storeToRefs(useOperationalBasesStore())\n\n  const apiGetOperationalBasesByDepartmentId = async (selectedDepartmentId: number): Promise<GETResponse<'operationalBases', IOperationalBase[]>> => {\n    return await apiClient.get('/api/operational-bases-by-department-id', {\n      params: {\n        selectedDepartmentId,\n      },\n    })\n  }\n\n  const apiGetOperationalBasesByDepartments = async (departments: IDepartment[]): Promise<IOperationalBase[]> => {\n    resetActionsInError()\n    addToActionsInProgress(operationalBaseActions.getOperationalBasesByDepartments)\n\n    const departmentIds = departments.map((department) => department.id)\n    const rsp = await apiClient.post('/api/operational-bases/get-by-departments', {\n      departmentIds,\n    })\n    removeFromActionsInProgress(operationalBaseActions.getOperationalBasesByDepartments)\n    return rsp.data.operationalBases\n  }\n\n  const fetchAndStoreOperationalBasesIndex = async (\n    selectedDepartmentId: number,\n  ) => {\n    resetActionsInError()\n    addToActionsInProgress(operationalBaseActions.getAllOperationalBases)\n\n    try {\n      await apiGetOperationalBasesByDepartmentId(\n        selectedDepartmentId,\n      )\n      removeFromActionsInProgress(operationalBaseActions.getAllOperationalBases)\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(operationalBaseActions.getAllOperationalBases, e)\n    }\n  }\n\n  const createOperationalBase = async (operationalBaseData: CreateOperationalBaseDTO): Promise<IOperationalBase | void> => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(operationalBaseActions.createOperationalBase)\n\n    try {\n      const operationalBase = await apiCreateOperationalBase(operationalBaseData)\n      processActionSuccess(operationalBaseActions.createOperationalBase)\n      return operationalBase\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(operationalBaseActions.createOperationalBase, e)\n    }\n  }\n\n  const getOperationalBaseById = async (operationalBaseId: string): Promise<IOperationalBase | void> => {\n    resetActionsInError()\n    addToActionsInProgress(operationalBaseActions.getOperationalBaseById)\n\n    try {\n      const rsp = await apiClient.get(`/api/operational-base/${operationalBaseId}`)\n      removeFromActionsInProgress(operationalBaseActions.getOperationalBaseById)\n      return rsp.data.operationalBase\n    }\n    catch (e: any) {\n      processActionError(operationalBaseActions.getOperationalBaseById, e)\n    }\n  }\n\n  const editOperationalBase = async (operationalBaseData: EditOperationalBaseDTO) => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(operationalBaseActions.editOperationalBase)\n\n    try {\n      const operationalBase = {\n        name: operationalBaseData.name,\n        department_id: operationalBaseData.department.id,\n        latitude: operationalBaseData.latitude,\n        longitude: operationalBaseData.longitude,\n      }\n\n      const rsp = await apiClient.put(`/api/operational-base/${operationalBaseData.id}`, {\n        operationalBase,\n      })\n      storeUpdateOperationalBases(rsp.data.operationalBase)\n      processActionSuccess(operationalBaseActions.editOperationalBase)\n      return rsp.data.operationalBase\n    }\n    catch (e: any) {\n      processActionError(operationalBaseActions.editOperationalBase, e)\n    }\n  }\n\n  const apiGetOpsBaseStatsData = async (\n    getOpsBaseStatsDataDTO: GetOpsBaseStatsDataDTO,\n  ): Promise<GetResponse<'operationalBaseStats', IOperationalBaseStats> | undefined> => {\n    resetActionsInError()\n\n    const action = getOpsBaseStatsDataDTO.requestingPreviousStats\n      ? operationalBaseActions.getPreviousOpsBaseStatsData\n      : operationalBaseActions.getOpsBaseStatsData\n\n    addToActionsInProgress(action)\n\n    try {\n      const rsp = await apiClient.get('/api/operational-bases/stats', {\n        params: {\n          dateRangeStart: getOpsBaseStatsDataDTO.dateRangeStart,\n          dateRangeEnd: getOpsBaseStatsDataDTO.dateRangeEnd,\n        },\n      })\n      removeFromActionsInProgress(action)\n\n      return rsp\n    }\n    catch (e: any) {\n      processActionError(action, e)\n    }\n  }\n\n  const getAllOperationalBasesFromStore = (): IOperationalBase[] => {\n    return storeOperationalBases.value\n  }\n\n  return {\n    operationalBaseActions,\n    fetchAndStoreOperationalBasesIndex,\n    storeClearOperationalBases,\n    getAllOperationalBasesFromStore,\n    createOperationalBase,\n    getOperationalBaseById,\n    apiGetOperationalBasesByDepartments,\n    editOperationalBase,\n    apiGetOperationalBasesByDepartmentId,\n    apiGetOpsBaseStatsData,\n  }\n}\n"],"names":["useOperationalBasesStore","defineStore","storeOperationalBases","ref","storeSetOperationalBases","operationalBases","storeAddOperationalBase","operationalBase","storeRemoveOperationalBase","operationalBaseId","index","ob","storeUpdateOperationalBases","storeClearOperationalBases","useAPIOperationalBase","apiClient","useApiClient","operationalBaseData","useOperationalBase","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","processActionSuccess","resetActionsInSuccess","useUi","operationalBaseActions","apiCreateOperationalBase","storeToRefs","apiGetOperationalBasesByDepartmentId","selectedDepartmentId","e","rsp","departments","departmentIds","department","getOpsBaseStatsDataDTO","action"],"mappings":"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"}
{"version":3,"file":"index-TCXC35p5.js","sources":["../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/addDays/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/startOfDay/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isSameDay/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isToday/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isTomorrow/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/subDays/index.js","../../node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isYesterday/index.js","../../src/shared/lib/date/index.ts"],"sourcesContent":["import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import addDays from \"../addDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is tomorrow\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\nexport default function isTomorrow(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, addDays(Date.now(), 1));\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import isSameDay from \"../isSameDay/index.js\";\nimport subDays from \"../subDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isYesterday\n * @category Day Helpers\n * @summary Is the given date yesterday?\n * @pure false\n *\n * @description\n * Is the given date yesterday?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is yesterday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\n * const result = isYesterday(new Date(2014, 9, 5, 14, 0))\n * //=> true\n */\nexport default function isYesterday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, subDays(Date.now(), 1));\n}","import { format, isToday, isTomorrow, isYesterday } from 'date-fns'\n\nexport function formatRelativeDay(date: Date) {\n  if (isToday(date)) return 'Today'\n  if (isTomorrow(date)) return 'Tomorrow'\n  if (isYesterday(date)) return 'Yesterday'\n\n  return format(date, 'LLL do')\n}\n"],"names":["addDays","dirtyDate","dirtyAmount","requiredArgs","date","toDate","amount","toInteger","startOfDay","isSameDay","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isToday","isTomorrow","subDays","isYesterday","formatRelativeDay","format"],"mappings":"6DAqBe,SAASA,EAAQC,EAAWC,EAAa,CACtDC,EAAa,EAAG,SAAS,EACzB,IAAIC,EAAOC,EAAOJ,CAAS,EACvBK,EAASC,EAAUL,CAAW,EAClC,OAAI,MAAMI,CAAM,EACP,IAAI,KAAK,GAAG,GAEhBA,GAILF,EAAK,QAAQA,EAAK,QAAS,EAAGE,CAAM,EAC7BF,EACT,CCde,SAASI,EAAWP,EAAW,CAC5CE,EAAa,EAAG,SAAS,EACzB,IAAIC,EAAOC,EAAOJ,CAAS,EAC3B,OAAAG,EAAK,SAAS,EAAG,EAAG,EAAG,CAAC,EACjBA,CACT,CCKe,SAASK,EAAUC,EAAeC,EAAgB,CAC/DR,EAAa,EAAG,SAAS,EACzB,IAAIS,EAAqBJ,EAAWE,CAAa,EAC7CG,EAAsBL,EAAWG,CAAc,EACnD,OAAOC,EAAmB,QAAO,IAAOC,EAAoB,QAAO,CACrE,CCZe,SAASC,EAAQb,EAAW,CACzC,OAAAE,EAAa,EAAG,SAAS,EAClBM,EAAUR,EAAW,KAAK,IAAK,CAAA,CACxC,CCFe,SAASc,EAAWd,EAAW,CAC5C,OAAAE,EAAa,EAAG,SAAS,EAClBM,EAAUR,EAAWD,EAAQ,KAAK,IAAK,EAAE,CAAC,CAAC,CACpD,CCNe,SAASgB,EAAQf,EAAWC,EAAa,CACtDC,EAAa,EAAG,SAAS,EACzB,IAAIG,EAASC,EAAUL,CAAW,EAClC,OAAOF,EAAQC,EAAW,CAACK,CAAM,CACnC,CCDe,SAASW,EAAYhB,EAAW,CAC7C,OAAAE,EAAa,EAAG,SAAS,EAClBM,EAAUR,EAAWe,EAAQ,KAAK,IAAK,EAAE,CAAC,CAAC,CACpD,CCzBO,SAASE,EAAkBd,EAAY,CAC5C,OAAIU,EAAQV,CAAI,EAAU,QACtBW,EAAWX,CAAI,EAAU,WACzBa,EAAYb,CAAI,EAAU,YAEvBe,EAAOf,EAAM,QAAQ,CAC9B","x_google_ignoreList":[0,1,2,3,4,5,6]}
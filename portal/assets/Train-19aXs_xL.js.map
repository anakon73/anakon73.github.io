{"version":3,"file":"Train-19aXs_xL.js","sources":["../../src/pages/staff/Train.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, onMounted, ref, toRefs, watch } from 'vue'\nimport { ChatBubbleLeftEllipsisIcon } from '@heroicons/vue/20/solid'\nimport { storeToRefs } from 'pinia'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport { useTraining } from '@/shared/api/useTraining'\nimport { useUser } from '@/shared/api/useUser'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport FeedbackWarning from '@/shared/ui/FeedbackWarning.vue'\nimport { useHelpers } from '@/shared/lib/utils/useHelpers'\nimport IconSchool from '@/shared/ui/icons/IconSchool.vue'\nimport IconDeleteCircle from '@/shared/ui/icons/IconDeleteCircle.vue'\nimport type { ITraining } from '@/shared/types/training/ITraining'\nimport type { TrainUserDTO } from '@/shared/types/training-logs/TrainingLogDTOs'\nimport type { ITrainingLogs } from '@/shared/types/training-logs/ITrainingLog'\nimport VTrainingCategorySelect from '@/shared/ui/inputs/VTrainingCategorySelect.vue'\nimport { useTrainingCategories } from '@/shared/api/training-categories/useTrainingCategories'\nimport { useAuth } from '@/shared/api/useAuth'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\nimport { useUiStore } from '@/shared/lib/composables/ui'\n\nconst props = defineProps<{ userId: number }>()\nconst { userId } = toRefs(props)\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst { getAllTrainingByUserAbility, getAllTrainingLogsByUserId, trainUser, deleteTrainingLog, trainingActions } = useTraining()\nconst { getCurrentDateInYmdFormat } = useHelpers()\nconst { user } = useUser()\n\nconst { trainingCategoryActions } = useTrainingCategories()\nconst { userHasPermissionInDepartment } = useAuth()\nconst { storeFilterState } = storeToRefs(useUiStore())\n\nconst trainUserFormElement = ref<HTMLFormElement | null>(null)\nconst allTraining = ref<ITraining[]>([])\nconst formattedDate = getCurrentDateInYmdFormat()\n\nconst existingUserLogs = ref<ITrainingLogs | null>(null)\n\nconst trainUserDTO = ref<TrainUserDTO | null>(null)\n\nconst confirmDeleteTrainingLogModalIsOpen = ref(false)\nconst trainingLogToDelete = ref(0)\n\nonMounted(async () => {\n  const [training, userLogs] = await Promise.all([\n    getAllTrainingByUserAbility(),\n    getAllTrainingLogsByUserId(userId.value.toString()),\n  ])\n\n  if (training && userLogs) {\n    allTraining.value = training\n    existingUserLogs.value = userLogs\n\n    trainUserDTO.value = {\n      trainingCategoryId: allTraining.value[0] ? allTraining.value[0].category.id : 1,\n      trainee: userLogs.user,\n      trainer: user.value!,\n      date: formattedDate,\n      training: allTraining.value[0],\n      feedback: '',\n    }\n  }\n})\n\nconst handleConfirmDeleteTrainingLogModel = (trainingLogId: number) => {\n  trainingLogToDelete.value = trainingLogId\n  confirmDeleteTrainingLogModalIsOpen.value = true\n}\n\nconst handleFormSubmission = async () => {\n  await validateForm(trainUserFormElement.value, async () => {\n    if (!trainUserDTO.value) return\n    await trainUser(trainUserDTO.value)\n    const rsp = await getAllTrainingLogsByUserId(userId.value.toString())\n    if (rsp) {\n      existingUserLogs.value = rsp\n      trainUserDTO.value.feedback = ''\n    }\n  })\n}\n\nconst handleDeleteTrainingLog = async (trainingLogId: number) => {\n  await deleteTrainingLog(trainingLogId)\n  if (!trainUserDTO.value) return\n  const rsp = await getAllTrainingLogsByUserId(userId.value.toString())\n\n  if (rsp) {\n    existingUserLogs.value = rsp\n  }\n}\n\nconst filteredTraining = computed(() => {\n  return allTraining.value.filter(\n    (training: ITraining) => training.category.id === trainUserDTO.value?.trainingCategoryId,\n  )\n})\n\nwatch(userId, async (newId) => {\n  const logs = await getAllTrainingLogsByUserId(newId.toString())\n  if (logs) {\n    existingUserLogs.value = logs\n    trainUserDTO.value!.trainee = logs.user\n  }\n})\n\nwatch (() => trainUserDTO.value?.trainingCategoryId, () => {\n  trainUserDTO.value!.training = filteredTraining.value[0]\n})\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <div class=\"sticky top-0 z-10 flex w-full items-center justify-end bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(trainingActions.getAllTrainingByUserAbility)\n            || actionIsInProgress(trainingActions.getAllTrainingLogsByUserId)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-else\n          :to=\"{ name: $Routes.Staff }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        v-if=\"trainUserDTO && allTraining && allTraining.length > 0\"\n        id=\"train_user_form\"\n        ref=\"trainUserFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"space-y-8 divide-y divide-gray-200\">\n          <div>\n            <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n              Log training.\n            </h3>\n            <p class=\"mt-1 text-sm text-gray-500\">\n              Use the form below to create a new Training Log for <span class=\"font-medium\">{{ trainUserDTO.trainee.fullName }}</span>.\n            </p>\n          </div>\n\n          <div class=\"flex flex-col space-y-6 pt-6\">\n            <div>\n              <label for=\"date\" class=\"block text-sm font-medium text-gray-700\">\n                Date\n              </label>\n              <input\n                id=\"date\"\n                v-model=\"trainUserDTO.date\"\n                type=\"date\"\n                name=\"date\"\n                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n              >\n            </div>\n            <div class=\"flex flex-wrap space-y-6 sm:space-x-3 sm:space-y-0\">\n              <div class=\"w-full sm:flex-1\">\n                <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n                  Category\n                </p>\n                <VTrainingCategorySelect v-model=\"trainUserDTO.trainingCategoryId\" />\n              </div>\n              <div class=\"w-full sm:flex-1\">\n                <label for=\"training\" class=\"block text-sm font-medium text-gray-700\">\n                  Training\n                </label>\n                <select\n                  id=\"training\"\n                  v-model=\"trainUserDTO.training\"\n                  name=\"training\"\n                  class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  :disabled=\"actionIsInProgress(trainingCategoryActions.getTrainingCategories)\"\n                >\n                  <option disabled selected value=\"null\">\n                    Select training...\n                  </option>\n                  <option\n                    v-for=\"training in filteredTraining\"\n                    :key=\"training.id\"\n                    :value=\"training\"\n                  >\n                    {{ training.name }}\n                  </option>\n                </select>\n              </div>\n            </div>\n            <div\n              v-if=\"trainUserDTO.training && trainUserDTO.training.requiresFeedback\"\n              class=\"sm:col-span-3\"\n            >\n              <label for=\"feedback\" class=\"block text-sm font-medium text-gray-700\">\n                Feedback or additional comments <span class=\"text-xs font-normal text-gray-400\" v-html=\"`(from ${user?.fullName})`\" />\n              </label>\n              <textarea\n                id=\"feedback\"\n                v-model=\"trainUserDTO.feedback\"\n                name=\"feedback\"\n                rows=\"8\"\n                class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                required\n              />\n            </div>\n          </div>\n        </div>\n\n        <div\n          v-if=\"trainUserDTO.training\"\n          class=\"relative pt-5\"\n        >\n          <div class=\"flex items-center justify-end\">\n            <Transition name=\"alert\">\n              <ActionSuccessAlert\n                v-if=\"actionIsInSuccess(trainingActions.trainUser)\"\n                :action=\"trainingActions.trainUser\"\n              />\n            </Transition>\n            <Transition name=\"alert\">\n              <ActionErrorAlert\n                v-if=\"actionIsInError(trainingActions.trainUser)\"\n                :action=\"trainingActions.trainUser\"\n              />\n            </Transition>\n            <div class=\"flex items-center\">\n              <button\n                :disabled=\"actionIsInProgress(trainingActions.getAllTrainingByUserAbility)\n                  || actionIsInProgress(trainingActions.getAllTrainingLogsByUserId)\n                  || actionIsInProgress(trainingActions.trainUser)\"\n                class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none disabled:cursor-not-allowed hover:bg-blue-700\"\n                @click.prevent=\"handleFormSubmission\"\n              >\n                <span\n                  v-if=\"!actionIsInProgress(trainingActions.getAllTrainingByUserAbility)\n                    && !actionIsInProgress(trainingActions.getAllTrainingLogsByUserId)\n                    && !actionIsInProgress(trainingActions.trainUser)\"\n                >\n                  Save\n                </span>\n                <ProgressSpinner\n                  v-else\n                  class=\"h-3 w-3 text-white\"\n                />\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div\n        v-if=\"trainUserDTO && existingUserLogs && existingUserLogs.logs.length\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 pt-12 md:px-12\"\n      >\n        <div class=\"space-y-8 divide-y divide-gray-200\">\n          <div class=\"flex items-center justify-between\">\n            <div>\n              <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n                Previous training logs.\n              </h3>\n              <p class=\"mt-1 text-sm text-gray-500\">\n                Below are the previous training logs for <span class=\"font-medium\">{{ trainUserDTO.trainee.fullName }}</span>.\n              </p>\n            </div>\n            <ProgressSpinner\n              v-if=\"actionIsInProgress(trainingActions.getAllTrainingLogsByUserId)\"\n              class=\"h-5 w-5 text-blue-500\"\n            />\n          </div>\n\n          <div\n            v-if=\"!actionIsInProgress(trainingActions.getAllTrainingLogsByUserId) && existingUserLogs && existingUserLogs.logs.length > 0\"\n            class=\"flex flex-col space-y-3 pt-6\"\n          >\n            <div class=\"flow-root\">\n              <ul role=\"list\" class=\"-mb-8\">\n                <li\n                  v-for=\"(trainingLog, trainingLogItemIdx) in existingUserLogs.logs\"\n                  :key=\"trainingLog.id\"\n                >\n                  <div class=\"relative pb-8\">\n                    <span\n                      v-if=\"trainingLogItemIdx !== existingUserLogs.logs.length - 1\"\n                      class=\"absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200\"\n                      aria-hidden=\"true\"\n                    />\n                    <div class=\"relative flex items-start space-x-3\">\n                      <template v-if=\"trainingLog.feedback\">\n                        <div class=\"relative\">\n                          <img\n                            v-if=\"trainingLog.trainer.profilePhotoSrc\"\n                            class=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-400 ring-8 ring-white\"\n                            :src=\"trainingLog.trainer.profilePhotoSrc\"\n                            alt=\"Trainer profile photo\"\n                          >\n                          <div\n                            v-else\n                            class=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\"\n                          >\n                            <IconSchool class=\"h-5 w-5 fill-gray-500\" aria-hidden=\"true\" />\n                          </div>\n                          <span class=\"absolute -bottom-0.5 -right-0.5 rounded-tl bg-white px-0.5 py-px\">\n                            <ChatBubbleLeftEllipsisIcon class=\"h-4 w-4 text-gray-400\" aria-hidden=\"true\" />\n                          </span>\n                        </div>\n                        <div class=\"min-w-0 flex-1\">\n                          <div>\n                            <p class=\"text-sm font-medium text-gray-900\">\n                              {{ trainingLog.name }} <span class=\"text-xs text-gray-400\">(with {{ trainingLog.trainer.fullName }})</span>\n                            </p>\n                            <p class=\"mt-0.5 text-sm text-gray-500\">\n                              Training date: <span class=\"text-xs\">{{ trainingLog.date }}</span>\n                            </p>\n                          </div>\n                          <div class=\"mt-2 text-sm text-gray-700\">\n                            <p class=\"italic\">\n                              - \"{{ trainingLog.feedback }}\"\n                            </p>\n                          </div>\n                        </div>\n                      </template>\n                      <template v-else-if=\"!trainingLog.feedback\">\n                        <div class=\"relative px-1\">\n                          <div class=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-100 ring-8 ring-white\">\n                            <IconSchool class=\"h-5 w-5 fill-gray-500\" aria-hidden=\"true\" />\n                          </div>\n                        </div>\n                        <div class=\"min-w-0 flex-1 py-1.5\">\n                          <div class=\"text-sm text-gray-500\">\n                            <p\n                              v-if=\"trainingLog.feedback\"\n                              class=\"font-medium text-gray-900\"\n                            >\n                              {{ trainingLog.name }} <span class=\"text-xs text-gray-400\">(with {{ trainingLog.trainer.fullName }})</span>\n                            </p>\n                            <p\n                              v-else\n                              class=\"font-medium text-gray-900\"\n                              v-text=\"trainingLog.name\"\n                            />\n                            Training date:\n                            <span class=\"whitespace-nowrap text-xs\">\n                              {{ trainingLog.date }}\n                            </span>\n                          </div>\n                        </div>\n                      </template>\n                      <button\n                        v-if=\"storeFilterState.selectedDepartment\n                          && (userHasPermissionInDepartment(\n                            AppPermissions.MANAGE_TRAINING,\n                            storeFilterState.selectedDepartment,\n                          )\n                            || trainingLog.trainer.id === user?.id)\"\n                        class=\"group\"\n                        @click=\"handleConfirmDeleteTrainingLogModel(trainingLog.id)\"\n                      >\n                        <IconDeleteCircle\n                          v-if=\"!actionIsInProgress({\n                            id: `deleteTrainingLog-${trainingLog.id.toString()}`,\n                            successMessage: 'Training log deleted successfully.',\n                            errorMessage: 'Failed to delete training log.',\n                          })\"\n                          class=\"h-5 w-5 fill-red-400 group-hover:fill-red-600\"\n                        />\n                        <ProgressSpinner\n                          v-else\n                          class=\"h-5 w-5 text-red-400 group-hover:text-red-600\"\n                        />\n                      </button>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <FeedbackWarning\n            v-else-if=\"trainUserDTO && !actionIsInProgress(trainingActions.getAllTrainingLogsByUserId) && !actionIsInProgress(trainingActions.getAllTrainingLogsByUserId)\"\n            :title=\"`There are no training logs for ${trainUserDTO.trainee.fullName}`\"\n            message=\"Use the form above to add a new training log.\"\n          />\n          <Teleport to=\"#modal\">\n            <Transition>\n              <div\n                v-if=\"confirmDeleteTrainingLogModalIsOpen\"\n                class=\"pointer-events-auto fixed inset-0 isolate flex items-center justify-center overflow-x-auto bg-black/50\"\n                @click=\"confirmDeleteTrainingLogModalIsOpen = false\"\n              >\n                <div class=\"rounded-md bg-white shadow sm:rounded-lg\">\n                  <div class=\"px-4 py-5 sm:p-6\">\n                    <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n                      Are you sure?\n                    </h3>\n                    <div class=\"mt-5 flex space-x-2\">\n                      <button\n                        type=\"button\"\n                        class=\"inline-flex items-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-500 hover:bg-red-500\"\n                        @click=\"confirmDeleteTrainingLogModalIsOpen = false\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"button\"\n                        class=\"inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 hover:bg-blue-500\"\n                        @click=\"handleDeleteTrainingLog(trainingLogToDelete)\"\n                      >\n                        Confirm\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Transition>\n          </Teleport>\n        </div>\n      </div>\n    </div>\n  </RightDrawer>\n</template>\n\n<style scoped>\n.alert-enter-active,\n.alert-leave-active {\n  transition: all 0.5s cubic-bezier(0, 1.3, 1, 1.05);\n}\n\n.alert-enter-from {\n  opacity: 0;\n  transform: translateX(-300px);\n}\n.alert-leave-to {\n  opacity: 0;\n}\n</style>\n"],"names":["props","__props","userId","toRefs","validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","getAllTrainingByUserAbility","getAllTrainingLogsByUserId","trainUser","deleteTrainingLog","trainingActions","useTraining","getCurrentDateInYmdFormat","useHelpers","user","useUser","trainingCategoryActions","useTrainingCategories","userHasPermissionInDepartment","useAuth","storeFilterState","storeToRefs","useUiStore","trainUserFormElement","ref","allTraining","formattedDate","existingUserLogs","trainUserDTO","confirmDeleteTrainingLogModalIsOpen","trainingLogToDelete","onMounted","training","userLogs","handleConfirmDeleteTrainingLogModel","trainingLogId","handleFormSubmission","rsp","handleDeleteTrainingLog","filteredTraining","computed","_a","watch","newId","logs"],"mappings":"wjMAyBA,MAAMA,EAAQC,EACR,CAAE,OAAAC,CAAA,EAAWC,GAAOH,CAAK,EAEzB,CAAE,aAAAI,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,KAC3E,CAAE,4BAAAC,EAA6B,2BAAAC,EAA4B,UAAAC,EAAW,kBAAAC,EAAmB,gBAAAC,CAAA,EAAoBC,KAC7G,CAAE,0BAAAC,GAA8BC,KAChC,CAAE,KAAAC,GAASC,KAEX,CAAE,wBAAAC,GAA4BC,KAC9B,CAAE,8BAAAC,GAAkCC,KACpC,CAAE,iBAAAC,CAAqB,EAAAC,GAAYC,GAAY,CAAA,EAE/CC,EAAuBC,EAA4B,IAAI,EACvDC,EAAcD,EAAiB,CAAA,CAAE,EACjCE,EAAgBd,IAEhBe,EAAmBH,EAA0B,IAAI,EAEjDI,EAAeJ,EAAyB,IAAI,EAE5CK,EAAsCL,EAAI,EAAK,EAC/CM,EAAsBN,EAAI,CAAC,EAEjCO,GAAU,SAAY,CACpB,KAAM,CAACC,EAAUC,CAAQ,EAAI,MAAM,QAAQ,IAAI,CAC7C3B,EAA4B,EAC5BC,EAA2BR,EAAO,MAAM,UAAU,CAAA,CACnD,EAEGiC,GAAYC,IACdR,EAAY,MAAQO,EACpBL,EAAiB,MAAQM,EAEzBL,EAAa,MAAQ,CACnB,mBAAoBH,EAAY,MAAM,CAAC,EAAIA,EAAY,MAAM,CAAC,EAAE,SAAS,GAAK,EAC9E,QAASQ,EAAS,KAClB,QAASnB,EAAK,MACd,KAAMY,EACN,SAAUD,EAAY,MAAM,CAAC,EAC7B,SAAU,EAAA,EAEd,CACD,EAEK,MAAAS,EAAuCC,GAA0B,CACrEL,EAAoB,MAAQK,EAC5BN,EAAoC,MAAQ,EAAA,EAGxCO,EAAuB,SAAY,CACjC,MAAAnC,EAAasB,EAAqB,MAAO,SAAY,CACzD,GAAI,CAACK,EAAa,MAAO,OACnB,MAAApB,EAAUoB,EAAa,KAAK,EAClC,MAAMS,EAAM,MAAM9B,EAA2BR,EAAO,MAAM,UAAU,EAChEsC,IACFV,EAAiB,MAAQU,EACzBT,EAAa,MAAM,SAAW,GAChC,CACD,CAAA,EAGGU,EAA0B,MAAOH,GAA0B,CAE/D,GADA,MAAM1B,EAAkB0B,CAAa,EACjC,CAACP,EAAa,MAAO,OACzB,MAAMS,EAAM,MAAM9B,EAA2BR,EAAO,MAAM,UAAU,EAEhEsC,IACFV,EAAiB,MAAQU,EAC3B,EAGIE,EAAmBC,GAAS,IACzBf,EAAY,MAAM,OACtBO,GAAwB,OAAA,OAAAA,EAAS,SAAS,OAAOS,EAAAb,EAAa,QAAb,YAAAa,EAAoB,oBAAA,CAEzE,EAEK,OAAAC,EAAA3C,EAAQ,MAAO4C,GAAU,CAC7B,MAAMC,EAAO,MAAMrC,EAA2BoC,EAAM,SAAU,CAAA,EAC1DC,IACFjB,EAAiB,MAAQiB,EACZhB,EAAA,MAAO,QAAUgB,EAAK,KACrC,CACD,EAEDF,EAAO,IAAM,OAAA,OAAAD,EAAAb,EAAa,QAAb,YAAAa,EAAoB,oBAAoB,IAAM,CACzDb,EAAa,MAAO,SAAWW,EAAiB,MAAM,CAAC,CAAA,CACxD"}
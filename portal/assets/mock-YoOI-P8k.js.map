{"version":3,"file":"mock-YoOI-P8k.js","sources":["../../src/shared/api/scheduled-departure/mock.ts"],"sourcesContent":["import type { z } from 'zod'\nimport { faker as f } from '@faker-js/faker'\nimport { HttpResponse, http } from 'msw'\n\nimport { type ScheduledDeparture, ScheduledDepartureStatus } from '@/shared/types'\nimport { makeArrayMock } from '@/shared/lib/utils'\n\nimport { type Handlers, mockUrl, mockUrlParam } from '../lib'\nimport { makeTourBookingSchemaMock } from '../booking/mock'\nimport { makeTourSchemaMock } from '../tour/mock'\nimport { makeDepartureSchemaMock } from '../departure/mock'\n\nimport type { ScheduledDepartureSchema } from '../schemas'\nimport { normalizeScheduledDeparture } from './normalizers'\nimport { endpoints } from './api'\n\nexport function makeScheduledDepartureSchemaMock(\n): z.infer<typeof ScheduledDepartureSchema> {\n  const totalPassengerCount = f.number.int({ min: 5, max: 15 })\n\n  return {\n    id: f.number.int() as ScheduledDeparture['id'],\n    comment: f.datatype.boolean() ? f.lorem.paragraph() : null,\n    totalPassengerCount,\n    bookingSystemAvailability: f.datatype.boolean()\n      ? f.number.int({ min: totalPassengerCount, max: totalPassengerCount + 5 })\n      : null,\n    status: f.helpers.enumValue(ScheduledDepartureStatus),\n    tour: makeTourSchemaMock(),\n    departure: makeDepartureSchemaMock(),\n    tourBookings: makeArrayMock(makeTourBookingSchemaMock, 10),\n    scheduledUsers: [], // TODO\n    start: f.date.recent().toISOString(),\n    end: f.date.recent().toISOString(),\n  }\n}\n\nexport const makeScheduledDepartureMock = (): ScheduledDeparture => (\n  normalizeScheduledDeparture(makeScheduledDepartureSchemaMock())\n)\n\nexport const scheduledDepartureHandlers: Handlers<typeof endpoints, 'ScheduledDeparture'> = {\n  ScheduledDepartureGetByOperationalBaseAndDate: (() => {\n    const { url, method, schema } = endpoints.getByOperationalBaseAndDate\n\n    return http[method](\n      mockUrl(url({\n        operationalBaseId: mockUrlParam(':operationalBaseId'),\n        date: mockUrlParam(':date'),\n      })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { data: makeArrayMock(makeScheduledDepartureSchemaMock) },\n      ),\n    )\n  })(),\n  ScheduledDepartureGetById: (() => {\n    const { url, method, schema } = endpoints.getById\n\n    return http[method](\n      mockUrl(url({ scheduledDepartureId: mockUrlParam(':scheduledDepartureId') })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { data: makeScheduledDepartureSchemaMock() },\n      ),\n    )\n  })(),\n  ScheduledDepartureUpdate: (() => {\n    const { url, method, schema } = endpoints.update\n\n    return http[method](\n      mockUrl(url({ scheduledDepartureId: mockUrlParam(':scheduledDepartureId') })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { data: makeScheduledDepartureSchemaMock() },\n      ),\n    )\n  })(),\n  ScheduledDepartureSuggestResources: (() => {\n    const { url, method, schema } = endpoints.suggestResources\n\n    return http[method](\n      mockUrl(url({ scheduledDepartureId: mockUrlParam(':scheduledDepartureId') })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { users: [1, 2, 3, 4, 5], vehicles: [1, 2, 3, 4, 5] },\n      ),\n    )\n  })(),\n  ScheduledDepartureUpdateScheduledUsers: (() => {\n    const { url, method, schema } = endpoints.updateScheduledUsers\n\n    return http[method](\n      mockUrl(url({ scheduledDepartureId: mockUrlParam(':scheduledDepartureId') })),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        { data: [] },\n      ),\n    )\n  })(),\n}\n"],"names":["makeScheduledDepartureSchemaMock","totalPassengerCount","f","ScheduledDepartureStatus","makeTourSchemaMock","makeDepartureSchemaMock","makeArrayMock","makeTourBookingSchemaMock","makeScheduledDepartureMock","normalizeScheduledDeparture","scheduledDepartureHandlers","url","method","schema","endpoints","http","mockUrl","mockUrlParam","HttpResponse"],"mappings":"6XAgBO,SAASA,GAC4B,CACpC,MAAAC,EAAsBC,EAAE,OAAO,IAAI,CAAE,IAAK,EAAG,IAAK,EAAA,CAAI,EAErD,MAAA,CACL,GAAIA,EAAE,OAAO,IAAI,EACjB,QAASA,EAAE,SAAS,QAAA,EAAYA,EAAE,MAAM,YAAc,KACtD,oBAAAD,EACA,0BAA2BC,EAAE,SAAS,QAAA,EAClCA,EAAE,OAAO,IAAI,CAAE,IAAKD,EAAqB,IAAKA,EAAsB,CAAA,CAAG,EACvE,KACJ,OAAQC,EAAE,QAAQ,UAAUC,CAAwB,EACpD,KAAMC,EAAmB,EACzB,UAAWC,EAAwB,EACnC,aAAcC,EAAcC,EAA2B,EAAE,EACzD,eAAgB,CAAC,EACjB,MAAOL,EAAE,KAAK,OAAA,EAAS,YAAY,EACnC,IAAKA,EAAE,KAAK,OAAA,EAAS,YAAY,CAAA,CAErC,CAEO,MAAMM,EAA6B,IACxCC,EAA4BT,GAAkC,EAGnDU,EAA+E,CAC1F,+CAAgD,IAAM,CACpD,KAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,4BAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CACV,kBAAmBM,EAAa,oBAAoB,EACpD,KAAMA,EAAa,OAAO,CAAA,CAC3B,CAAC,EACF,IAAMC,EAAa,KACjB,CAAE,KAAMZ,EAAcN,CAAgC,CAAE,CAC1D,CAAA,CACF,GACC,EACH,2BAA4B,IAAM,CAChC,KAAM,CAAE,IAAAW,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,QAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CAAE,qBAAsBM,EAAa,uBAAuB,CAAA,CAAG,CAAC,EAC5E,IAAMC,EAAa,KACjB,CAAE,KAAMlB,GAAmC,CAC7C,CAAA,CACF,GACC,EACH,0BAA2B,IAAM,CAC/B,KAAM,CAAE,IAAAW,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,OAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CAAE,qBAAsBM,EAAa,uBAAuB,CAAA,CAAG,CAAC,EAC5E,IAAMC,EAAa,KACjB,CAAE,KAAMlB,GAAmC,CAC7C,CAAA,CACF,GACC,EACH,oCAAqC,IAAM,CACzC,KAAM,CAAE,IAAAW,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,iBAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CAAE,qBAAsBM,EAAa,uBAAuB,CAAA,CAAG,CAAC,EAC5E,IAAMC,EAAa,KACjB,CAAE,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAAG,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,CAAE,CACtD,CAAA,CACF,GACC,EACH,wCAAyC,IAAM,CAC7C,KAAM,CAAE,IAAAP,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,qBAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,EAAI,CAAE,qBAAsBM,EAAa,uBAAuB,CAAA,CAAG,CAAC,EAC5E,IAAMC,EAAa,KACjB,CAAE,KAAM,CAAA,CAAG,CACb,CAAA,CACF,GACC,CACL"}
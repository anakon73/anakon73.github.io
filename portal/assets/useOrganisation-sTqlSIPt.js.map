{"version":3,"file":"useOrganisation-sTqlSIPt.js","sources":["../../src/shared/api/useOrganisation.ts"],"sourcesContent":["import type { IAction } from '@/shared/types/api/IAction'\nimport type { GetResponse } from '@/shared/types/requests/ResponseTypes'\nimport { HttpMethods } from '@/shared/types/api/http-methods'\nimport type { IOrganisation } from '@/shared/types/organisations/IOrganisation'\nimport { useApiRequest } from '@/shared/api/useApiRequest'\nimport type { GetOrganisationsDTO } from '@/shared/types/organisations/organisationDTOs'\n\nexport function useOrganisation() {\n  const { apiRequest } = useApiRequest()\n\n  const organisationActions = {\n    getAllOrganisations: {\n      id: 'getAllOrganisations',\n      successMessage: 'Organisations retrieved successfully.',\n      errorMessage: 'Failed to retrieve organisations.',\n    } as IAction,\n  }\n\n  const apiGetOrganisations = async (\n    getOrganisationsDTO: GetOrganisationsDTO,\n  ): Promise<GetResponse<'organisations', IOrganisation[]>> => {\n    return await apiRequest({\n      method: HttpMethods.GET,\n      url: 'api/organisations',\n      actions: [organisationActions.getAllOrganisations],\n      config: {\n        params: {\n          paginate: false,\n          sortBy: getOrganisationsDTO.sortBy,\n          orderBy: getOrganisationsDTO.orderBy,\n        },\n      },\n    })\n  }\n\n  return {\n    organisationActions,\n    apiGetOrganisations,\n  }\n}\n"],"names":["useOrganisation","apiRequest","useApiRequest","organisationActions","getOrganisationsDTO","HttpMethods"],"mappings":"oDAOO,SAASA,GAAkB,CAC1B,KAAA,CAAE,WAAAC,GAAeC,IAEjBC,EAAsB,CAC1B,oBAAqB,CACnB,GAAI,sBACJ,eAAgB,wCAChB,aAAc,mCAChB,CAAA,EAoBK,MAAA,CACL,oBAAAA,EACA,oBAnB0B,MAC1BC,GAEO,MAAMH,EAAW,CACtB,OAAQI,EAAY,IACpB,IAAK,oBACL,QAAS,CAACF,EAAoB,mBAAmB,EACjD,OAAQ,CACN,OAAQ,CACN,SAAU,GACV,OAAQC,EAAoB,OAC5B,QAASA,EAAoB,OAC/B,CACF,CAAA,CACD,CAKD,CAEJ"}
{"version":3,"file":"index-LmGWO5sK.js","sources":["../../node_modules/.pnpm/@antfu+utils@0.7.7/node_modules/@antfu/utils/dist/index.mjs","../../src/shared/lib/utils/index.ts"],"sourcesContent":["function clamp(n, min, max) {\n  return Math.min(max, Math.max(min, n));\n}\nfunction sum(...args) {\n  return flattenArrayable(args).reduce((a, b) => a + b, 0);\n}\nfunction lerp(min, max, t) {\n  const interpolation = clamp(t, 0, 1);\n  return min + (max - min) * interpolation;\n}\nfunction remap(n, inMin, inMax, outMin, outMax) {\n  const interpolation = (n - inMin) / (inMax - inMin);\n  return lerp(outMin, outMax, interpolation);\n}\n\nfunction toArray(array) {\n  array = array ?? [];\n  return Array.isArray(array) ? array : [array];\n}\nfunction flattenArrayable(array) {\n  return toArray(array).flat(1);\n}\nfunction mergeArrayable(...args) {\n  return args.flatMap((i) => toArray(i));\n}\nfunction partition(array, ...filters) {\n  const result = Array.from({ length: filters.length + 1 }).fill(null).map(() => []);\n  array.forEach((e, idx, arr) => {\n    let i = 0;\n    for (const filter of filters) {\n      if (filter(e, idx, arr)) {\n        result[i].push(e);\n        return;\n      }\n      i += 1;\n    }\n    result[i].push(e);\n  });\n  return result;\n}\nfunction uniq(array) {\n  return Array.from(new Set(array));\n}\nfunction uniqueBy(array, equalFn) {\n  return array.reduce((acc, cur) => {\n    const index = acc.findIndex((item) => equalFn(cur, item));\n    if (index === -1)\n      acc.push(cur);\n    return acc;\n  }, []);\n}\nfunction last(array) {\n  return at(array, -1);\n}\nfunction remove(array, value) {\n  if (!array)\n    return false;\n  const index = array.indexOf(value);\n  if (index >= 0) {\n    array.splice(index, 1);\n    return true;\n  }\n  return false;\n}\nfunction at(array, index) {\n  const len = array.length;\n  if (!len)\n    return void 0;\n  if (index < 0)\n    index += len;\n  return array[index];\n}\nfunction range(...args) {\n  let start, stop, step;\n  if (args.length === 1) {\n    start = 0;\n    step = 1;\n    [stop] = args;\n  } else {\n    [start, stop, step = 1] = args;\n  }\n  const arr = [];\n  let current = start;\n  while (current < stop) {\n    arr.push(current);\n    current += step || 1;\n  }\n  return arr;\n}\nfunction move(arr, from, to) {\n  arr.splice(to, 0, arr.splice(from, 1)[0]);\n  return arr;\n}\nfunction clampArrayRange(n, arr) {\n  return clamp(n, 0, arr.length - 1);\n}\nfunction sample(arr, quantity) {\n  return Array.from({ length: quantity }, (_) => arr[Math.round(Math.random() * (arr.length - 1))]);\n}\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction assert(condition, message) {\n  if (!condition)\n    throw new Error(message);\n}\nconst toString = (v) => Object.prototype.toString.call(v);\nfunction getTypeName(v) {\n  if (v === null)\n    return \"null\";\n  const type = toString(v).slice(8, -1).toLowerCase();\n  return typeof v === \"object\" || typeof v === \"function\" ? type : typeof v;\n}\nfunction noop() {\n}\n\nfunction isDeepEqual(value1, value2) {\n  const type1 = getTypeName(value1);\n  const type2 = getTypeName(value2);\n  if (type1 !== type2)\n    return false;\n  if (type1 === \"array\") {\n    if (value1.length !== value2.length)\n      return false;\n    return value1.every((item, i) => {\n      return isDeepEqual(item, value2[i]);\n    });\n  }\n  if (type1 === \"object\") {\n    const keyArr = Object.keys(value1);\n    if (keyArr.length !== Object.keys(value2).length)\n      return false;\n    return keyArr.every((key) => {\n      return isDeepEqual(value1[key], value2[key]);\n    });\n  }\n  return Object.is(value1, value2);\n}\n\nfunction notNullish(v) {\n  return v != null;\n}\nfunction noNull(v) {\n  return v !== null;\n}\nfunction notUndefined(v) {\n  return v !== void 0;\n}\nfunction isTruthy(v) {\n  return Boolean(v);\n}\n\nconst isDef = (val) => typeof val !== \"undefined\";\nconst isBoolean = (val) => typeof val === \"boolean\";\nconst isFunction = (val) => typeof val === \"function\";\nconst isNumber = (val) => typeof val === \"number\";\nconst isString = (val) => typeof val === \"string\";\nconst isObject = (val) => toString(val) === \"[object Object]\";\nconst isUndefined = (val) => toString(val) === \"[object Undefined]\";\nconst isNull = (val) => toString(val) === \"[object Null]\";\nconst isRegExp = (val) => toString(val) === \"[object RegExp]\";\nconst isDate = (val) => toString(val) === \"[object Date]\";\nconst isWindow = (val) => typeof window !== \"undefined\" && toString(val) === \"[object Window]\";\nconst isBrowser = typeof window !== \"undefined\";\n\nfunction slash(str) {\n  return str.replace(/\\\\/g, \"/\");\n}\nfunction ensurePrefix(prefix, str) {\n  if (!str.startsWith(prefix))\n    return prefix + str;\n  return str;\n}\nfunction ensureSuffix(suffix, str) {\n  if (!str.endsWith(suffix))\n    return str + suffix;\n  return str;\n}\nfunction template(str, ...args) {\n  const [firstArg, fallback] = args;\n  if (isObject(firstArg)) {\n    const vars = firstArg;\n    return str.replace(/{([\\w\\d]+)}/g, (_, key) => vars[key] || ((typeof fallback === \"function\" ? fallback(key) : fallback) ?? key));\n  } else {\n    return str.replace(/{(\\d+)}/g, (_, key) => {\n      const index = Number(key);\n      if (Number.isNaN(index))\n        return key;\n      return args[index];\n    });\n  }\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction randomStr(size = 16, dict = urlAlphabet) {\n  let id = \"\";\n  let i = size;\n  const len = dict.length;\n  while (i--)\n    id += dict[Math.random() * len | 0];\n  return id;\n}\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1).toLowerCase();\n}\n\nconst timestamp = () => +Date.now();\n\nfunction batchInvoke(functions) {\n  functions.forEach((fn) => fn && fn());\n}\nfunction invoke(fn) {\n  return fn();\n}\nfunction tap(value, callback) {\n  callback(value);\n  return value;\n}\n\nfunction objectMap(obj, fn) {\n  return Object.fromEntries(\n    Object.entries(obj).map(([k, v]) => fn(k, v)).filter(notNullish)\n  );\n}\nfunction isKeyOf(obj, k) {\n  return k in obj;\n}\nfunction objectKeys(obj) {\n  return Object.keys(obj);\n}\nfunction objectEntries(obj) {\n  return Object.entries(obj);\n}\nfunction deepMerge(target, ...sources) {\n  if (!sources.length)\n    return target;\n  const source = sources.shift();\n  if (source === void 0)\n    return target;\n  if (isMergableObject(target) && isMergableObject(source)) {\n    objectKeys(source).forEach((key) => {\n      if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\")\n        return;\n      if (isMergableObject(source[key])) {\n        if (!target[key])\n          target[key] = {};\n        if (isMergableObject(target[key])) {\n          deepMerge(target[key], source[key]);\n        } else {\n          target[key] = source[key];\n        }\n      } else {\n        target[key] = source[key];\n      }\n    });\n  }\n  return deepMerge(target, ...sources);\n}\nfunction deepMergeWithArray(target, ...sources) {\n  if (!sources.length)\n    return target;\n  const source = sources.shift();\n  if (source === void 0)\n    return target;\n  if (Array.isArray(target) && Array.isArray(source))\n    target.push(...source);\n  if (isMergableObject(target) && isMergableObject(source)) {\n    objectKeys(source).forEach((key) => {\n      if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\")\n        return;\n      if (Array.isArray(source[key])) {\n        if (!target[key])\n          target[key] = [];\n        deepMergeWithArray(target[key], source[key]);\n      } else if (isMergableObject(source[key])) {\n        if (!target[key])\n          target[key] = {};\n        deepMergeWithArray(target[key], source[key]);\n      } else {\n        target[key] = source[key];\n      }\n    });\n  }\n  return deepMergeWithArray(target, ...sources);\n}\nfunction isMergableObject(item) {\n  return isObject(item) && !Array.isArray(item);\n}\nfunction objectPick(obj, keys, omitUndefined = false) {\n  return keys.reduce((n, k) => {\n    if (k in obj) {\n      if (!omitUndefined || obj[k] !== void 0)\n        n[k] = obj[k];\n    }\n    return n;\n  }, {});\n}\nfunction clearUndefined(obj) {\n  Object.keys(obj).forEach((key) => obj[key] === void 0 ? delete obj[key] : {});\n  return obj;\n}\nfunction hasOwnProperty(obj, v) {\n  if (obj == null)\n    return false;\n  return Object.prototype.hasOwnProperty.call(obj, v);\n}\n\nfunction createSingletonPromise(fn) {\n  let _promise;\n  function wrapper() {\n    if (!_promise)\n      _promise = fn();\n    return _promise;\n  }\n  wrapper.reset = async () => {\n    const _prev = _promise;\n    _promise = void 0;\n    if (_prev)\n      await _prev;\n  };\n  return wrapper;\n}\nfunction sleep(ms, callback) {\n  return new Promise(\n    (resolve) => setTimeout(async () => {\n      await (callback == null ? void 0 : callback());\n      resolve();\n    }, ms)\n  );\n}\nfunction createPromiseLock() {\n  const locks = [];\n  return {\n    async run(fn) {\n      const p = fn();\n      locks.push(p);\n      try {\n        return await p;\n      } finally {\n        remove(locks, p);\n      }\n    },\n    async wait() {\n      await Promise.allSettled(locks);\n    },\n    isWaiting() {\n      return Boolean(locks.length);\n    },\n    clear() {\n      locks.length = 0;\n    }\n  };\n}\nfunction createControlledPromise() {\n  let resolve, reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  promise.resolve = resolve;\n  promise.reject = reject;\n  return promise;\n}\n\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nfunction throttle (delay, callback, options) {\n  var _ref = options || {},\n      _ref$noTrailing = _ref.noTrailing,\n      noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n      _ref$noLeading = _ref.noLeading,\n      noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n      _ref$debounceMode = _ref.debounceMode,\n      debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n\n\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel(options) {\n    var _ref2 = options || {},\n        _ref2$upcomingOnly = _ref2.upcomingOnly,\n        upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */\n        lastExec = Date.now();\n\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, callback, options) {\n  var _ref = options || {},\n      _ref$atBegin = _ref.atBegin,\n      atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\n\n/*\nHow it works:\n`this.#head` is an instance of `Node` which keeps track of its current value and nests another instance of `Node` that keeps the value that comes after it. When a value is provided to `.enqueue()`, the code needs to iterate through `this.#head`, going deeper and deeper to find the last value. However, iterating through every single item is slow. This problem is solved by saving a reference to the last value as `this.#tail` so that it can reference it to add a new value.\n*/\n\nclass Node {\n\tvalue;\n\tnext;\n\n\tconstructor(value) {\n\t\tthis.value = value;\n\t}\n}\n\nclass Queue {\n\t#head;\n\t#tail;\n\t#size;\n\n\tconstructor() {\n\t\tthis.clear();\n\t}\n\n\tenqueue(value) {\n\t\tconst node = new Node(value);\n\n\t\tif (this.#head) {\n\t\t\tthis.#tail.next = node;\n\t\t\tthis.#tail = node;\n\t\t} else {\n\t\t\tthis.#head = node;\n\t\t\tthis.#tail = node;\n\t\t}\n\n\t\tthis.#size++;\n\t}\n\n\tdequeue() {\n\t\tconst current = this.#head;\n\t\tif (!current) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#head = this.#head.next;\n\t\tthis.#size--;\n\t\treturn current.value;\n\t}\n\n\tclear() {\n\t\tthis.#head = undefined;\n\t\tthis.#tail = undefined;\n\t\tthis.#size = 0;\n\t}\n\n\tget size() {\n\t\treturn this.#size;\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tlet current = this.#head;\n\n\t\twhile (current) {\n\t\t\tyield current.value;\n\t\t\tcurrent = current.next;\n\t\t}\n\t}\n}\n\nconst AsyncResource = {\n\tbind(fn, _type, thisArg) {\n\t\treturn fn.bind(thisArg);\n\t},\n};\n\nfunction pLimit(concurrency) {\n\tif (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (function_, resolve, arguments_) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => function_(...arguments_))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (function_, resolve, arguments_) => {\n\t\tqueue.enqueue(\n\t\t\tAsyncResource.bind(run.bind(undefined, function_, resolve, arguments_)),\n\t\t);\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (function_, ...arguments_) => new Promise(resolve => {\n\t\tenqueue(function_, resolve, arguments_);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount,\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size,\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue() {\n\t\t\t\tqueue.clear();\n\t\t\t},\n\t\t},\n\t});\n\n\treturn generator;\n}\n\nconst VOID = Symbol(\"p-void\");\nclass PInstance extends Promise {\n  constructor(items = [], options) {\n    super(() => {\n    });\n    this.items = items;\n    this.options = options;\n    this.promises = /* @__PURE__ */ new Set();\n  }\n  get promise() {\n    var _a;\n    let batch;\n    const items = [...Array.from(this.items), ...Array.from(this.promises)];\n    if ((_a = this.options) == null ? void 0 : _a.concurrency) {\n      const limit = pLimit(this.options.concurrency);\n      batch = Promise.all(items.map((p2) => limit(() => p2)));\n    } else {\n      batch = Promise.all(items);\n    }\n    return batch.then((l) => l.filter((i) => i !== VOID));\n  }\n  add(...args) {\n    args.forEach((i) => {\n      this.promises.add(i);\n    });\n  }\n  map(fn) {\n    return new PInstance(\n      Array.from(this.items).map(async (i, idx) => {\n        const v = await i;\n        if (v === VOID)\n          return VOID;\n        return fn(v, idx);\n      }),\n      this.options\n    );\n  }\n  filter(fn) {\n    return new PInstance(\n      Array.from(this.items).map(async (i, idx) => {\n        const v = await i;\n        const r = await fn(v, idx);\n        if (!r)\n          return VOID;\n        return v;\n      }),\n      this.options\n    );\n  }\n  forEach(fn) {\n    return this.map(fn).then();\n  }\n  reduce(fn, initialValue) {\n    return this.promise.then((array) => array.reduce(fn, initialValue));\n  }\n  clear() {\n    this.promises.clear();\n  }\n  then(fn) {\n    const p2 = this.promise;\n    if (fn)\n      return p2.then(fn);\n    else\n      return p2;\n  }\n  catch(fn) {\n    return this.promise.catch(fn);\n  }\n  finally(fn) {\n    return this.promise.finally(fn);\n  }\n}\nfunction p(items, options) {\n  return new PInstance(items, options);\n}\n\nexport { assert, at, batchInvoke, capitalize, clamp, clampArrayRange, clearUndefined, createControlledPromise, createPromiseLock, createSingletonPromise, debounce, deepMerge, deepMergeWithArray, ensurePrefix, ensureSuffix, flattenArrayable, getTypeName, hasOwnProperty, invoke, isBoolean, isBrowser, isDate, isDeepEqual, isDef, isFunction, isKeyOf, isNull, isNumber, isObject, isRegExp, isString, isTruthy, isUndefined, isWindow, last, lerp, mergeArrayable, move, noNull, noop, notNullish, notUndefined, objectEntries, objectKeys, objectMap, objectPick, p, partition, randomStr, range, remap, remove, sample, shuffle, slash, sleep, sum, tap, template, throttle, timestamp, toArray, toString, uniq, uniqueBy };\n","import { objectMap } from '@antfu/utils'\n\nexport type AnyObject = Record<string, unknown>\n\nexport type RecordToValues<T extends Record<string, unknown>> = T[keyof T]\n\nexport type ObjectToUnion<T> = T[keyof T]\n\nexport type Brand<K, T> = K & { __brand: T }\n\nexport type ExtractComponentProps<T> = T extends new () => { $props: infer P } ? P : never\n\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>\n}[keyof T]\n\nexport function ensure<T>(\n  argument: T | undefined | null,\n  message = 'This value was promised to be there.',\n): T {\n  if (argument === undefined || argument === null) {\n    throw new TypeError(message)\n  }\n\n  return argument\n}\n\ntype NonNullableRecord<T> = { [K in keyof T]: NonNullable<T[K]>; }\n\nexport const objectEnsure = <T extends Record<string, unknown>>(\n  obj: T,\n) => objectMap(obj, (k, v) => [k, ensure(v)]) as NonNullableRecord<T>\n\nexport const makeArrayMock = <T>(fn: () => T, max = 1, min: number | null = null) => Array.from({\n  length: min !== null ? Math.floor(Math.random() * (max - min + 1)) + min : max,\n}).map(fn)\n\nexport function omit<T extends AnyObject, K extends [...(keyof T)[]]>(\n  obj: T, ...keys: K\n): { [K2 in Exclude<keyof T, K[number]>]: T[K2] } {\n  const result = {} as {\n    [F in keyof typeof obj]: typeof obj[F]\n  }\n\n  let key: keyof typeof obj\n\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      result[key] = obj[key]\n    }\n  }\n\n  return result\n}\n\nexport function includes<E, T extends E>(\n  array: ReadonlyArray<T>,\n  element: E,\n): element is T {\n  return array.includes(element as T)\n}\n\nexport const sanitizeTel = (tel: string) => tel.replace(/[^+\\d]+/g, '')\n\nexport type ParametersExceptFirst<T extends (...args: any) => any> = T extends (\n  ignored: infer _,\n  ...args: infer P\n) => any ? P : never\n"],"names":["toString","v","getTypeName","type","isDeepEqual","value1","value2","type1","type2","item","i","keyArr","key","notNullish","isNumber","val","objectMap","obj","fn","k","objectPick","keys","omitUndefined","n","ensure","argument","message","objectEnsure","makeArrayMock","max","min","omit","result","includes","array","element","sanitizeTel","tel"],"mappings":"AA+GA,MAAMA,EAAYC,GAAM,OAAO,UAAU,SAAS,KAAKA,CAAC,EACxD,SAASC,EAAYD,EAAG,CACtB,GAAIA,IAAM,KACR,MAAO,OACT,MAAME,EAAOH,EAASC,CAAC,EAAE,MAAM,EAAG,EAAE,EAAE,cACtC,OAAO,OAAOA,GAAM,UAAY,OAAOA,GAAM,WAAaE,EAAO,OAAOF,CAC1E,CAIA,SAASG,EAAYC,EAAQC,EAAQ,CACnC,MAAMC,EAAQL,EAAYG,CAAM,EAC1BG,EAAQN,EAAYI,CAAM,EAChC,GAAIC,IAAUC,EACZ,MAAO,GACT,GAAID,IAAU,QACZ,OAAIF,EAAO,SAAWC,EAAO,OACpB,GACFD,EAAO,MAAM,CAACI,EAAMC,IAClBN,EAAYK,EAAMH,EAAOI,CAAC,CAAC,CACnC,EAEH,GAAIH,IAAU,SAAU,CACtB,MAAMI,EAAS,OAAO,KAAKN,CAAM,EACjC,OAAIM,EAAO,SAAW,OAAO,KAAKL,CAAM,EAAE,OACjC,GACFK,EAAO,MAAOC,GACZR,EAAYC,EAAOO,CAAG,EAAGN,EAAOM,CAAG,CAAC,CAC5C,CACF,CACD,OAAO,OAAO,GAAGP,EAAQC,CAAM,CACjC,CAEA,SAASO,EAAWZ,EAAG,CACrB,OAAOA,GAAK,IACd,CAcK,MAACa,EAAYC,GAAQ,OAAOA,GAAQ,SA+DzC,SAASC,EAAUC,EAAKC,EAAI,CAC1B,OAAO,OAAO,YACZ,OAAO,QAAQD,CAAG,EAAE,IAAI,CAAC,CAACE,EAAGlB,CAAC,IAAMiB,EAAGC,EAAGlB,CAAC,CAAC,EAAE,OAAOY,CAAU,CACnE,CACA,CAiEA,SAASO,EAAWH,EAAKI,EAAMC,EAAgB,GAAO,CACpD,OAAOD,EAAK,OAAO,CAACE,EAAGJ,KACjBA,KAAKF,IACH,CAACK,GAAiBL,EAAIE,CAAC,IAAM,UAC/BI,EAAEJ,CAAC,EAAIF,EAAIE,CAAC,GAETI,GACN,CAAE,CAAA,CACP,CC5RgB,SAAAC,EACdC,EACAC,EAAU,uCACP,CACC,GAA0BD,GAAa,KACnC,MAAA,IAAI,UAAUC,CAAO,EAGtB,OAAAD,CACT,CAIO,MAAME,EACXV,GACGD,EAAUC,EAAK,CAACE,EAAGlB,IAAM,CAACkB,EAAGK,EAAOvB,CAAC,CAAC,CAAC,EAE/B2B,EAAgB,CAAIV,EAAaW,EAAM,EAAGC,EAAqB,OAAS,MAAM,KAAK,CAC9F,OAAQA,IAAQ,KAAO,KAAK,MAAM,KAAK,OAAO,GAAKD,EAAMC,EAAM,EAAE,EAAIA,EAAMD,CAC7E,CAAC,EAAE,IAAIX,CAAE,EAEO,SAAAa,EACdd,KAAWI,EACqC,CAChD,MAAMW,EAAS,CAAA,EAIX,IAAApB,EAEJ,IAAKA,KAAOK,EACLI,EAAK,SAAST,CAAG,IACboB,EAAApB,CAAG,EAAIK,EAAIL,CAAG,GAIlB,OAAAoB,CACT,CAEgB,SAAAC,EACdC,EACAC,EACc,CACP,OAAAD,EAAM,SAASC,CAAY,CACpC,CAEO,MAAMC,EAAeC,GAAgBA,EAAI,QAAQ,WAAY,EAAE","x_google_ignoreList":[0]}
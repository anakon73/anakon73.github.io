{"version":3,"file":"useIncident-6dw9YxXc.js","sources":["../../src/shared/api/stores/incident.ts","../../src/shared/api/useIncident.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IIncident } from '@/shared/types/incidents/IIncident'\n\nexport const useIncidentStore = defineStore('incident', () => {\n  const incidentsIndex = ref<IIncident[]>([])\n\n  function setIncidentsIndex(i: IIncident[]) {\n    incidentsIndex.value = i\n  }\n\n  function addIncidentToIndex(i: IIncident) {\n    incidentsIndex.value.push(i)\n  }\n\n  function updateIncidentInIndex(i: IIncident) {\n    const index = incidentsIndex.value.findIndex((incident) => incident.id === i.id)\n    incidentsIndex.value[index] = i\n  }\n\n  function resetIncidentStore() {\n    incidentsIndex.value = []\n  }\n\n  return {\n    setIncidentsIndex,\n    incidentsIndex,\n    addIncidentToIndex,\n    updateIncidentInIndex,\n    resetIncidentStore,\n  }\n})\n","import { storeToRefs } from 'pinia'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useIncidentStore } from '@/shared/api/stores/incident'\n\nexport function useIncident() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n    resetActionsInSuccess,\n    processActionSuccess,\n  } = useUi()\n  const {\n    setIncidentsIndex,\n    resetIncidentStore,\n    addIncidentToIndex,\n    updateIncidentInIndex,\n  } = useIncidentStore()\n  const { incidentsIndex } = storeToRefs(useIncidentStore())\n\n  const incidentActions = {\n    createIncident: {\n      id: 'createIncident',\n      successMessage: 'Incident created successfully.',\n      errorMessage: 'There was a problem creating the incident.',\n    } as IAction,\n    getAllIncidents: {\n      id: 'getAllIncidents',\n      successMessage: 'Incidents retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the incidents.',\n    } as IAction,\n    getIncidentById: {\n      id: 'getIncidentById',\n      successMessage: 'Incident retrieved successfully.',\n      errorMessage: 'There was a problem retrieving the incident.',\n    } as IAction,\n    editIncident: {\n      id: 'editIncident',\n      successMessage: 'Incident updated successfully.',\n      errorMessage: 'There was a problem updating the incident.',\n    } as IAction,\n  }\n\n  const createIncident = async (incidentReportData: unknown) => {\n    /**\n     * We clear the actions in error so that any error response from\n     * a previous attempt to create a user is cleared.\n     */\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(incidentActions.createIncident)\n\n    try {\n      const rsp = await apiClient.post('/api/incident', incidentReportData)\n      addIncidentToIndex(rsp.data.incidents)\n      processActionSuccess(incidentActions.createIncident)\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(incidentActions.createIncident, e)\n    }\n  }\n\n  const fetchAndStoreIncidentsIndex = async (page: number) => {\n    resetActionsInError()\n    addToActionsInProgress(incidentActions.getAllIncidents)\n\n    try {\n      const rsp = await apiClient.get(`/api/incidents?page=${page}`)\n      setIncidentsIndex(rsp.data.incidents)\n      removeFromActionsInProgress(incidentActions.getAllIncidents)\n      return rsp.data\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(incidentActions.getAllIncidents, e)\n    }\n  }\n\n  const getAllIncidentsFromStore = () => {\n    return incidentsIndex.value\n  }\n\n  const getIncidentById = async (incidentId: string) => {\n    resetActionsInError()\n    addToActionsInProgress(incidentActions.getIncidentById)\n\n    try {\n      const rsp = await apiClient.get(`/api/incident/${incidentId}`)\n      removeFromActionsInProgress(incidentActions.getIncidentById)\n      return rsp.data.incident\n    }\n    catch (e: unknown) {\n      console.log(e)\n      processActionError(incidentActions.getIncidentById, e)\n    }\n  }\n\n  // TODO\n  // fix types\n  const editIncident = async (incidentData: any) => {\n    /**\n     * We clear the actions in error so that any error response from\n     * a previous attempt to create a user is cleared.\n     */\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(incidentActions.editIncident)\n\n    try {\n      const rsp = await apiClient.put(`/api/incident/${incidentData.id}`, incidentData)\n      updateIncidentInIndex(rsp.data.incidents)\n      processActionSuccess(incidentActions.editIncident)\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(incidentActions.editIncident, e)\n    }\n  }\n\n  return {\n    createIncident,\n    fetchAndStoreIncidentsIndex,\n    getAllIncidentsFromStore,\n    incidentActions,\n    resetIncidentStore,\n    getIncidentById,\n    editIncident,\n  }\n}\n"],"names":["useIncidentStore","defineStore","incidentsIndex","ref","setIncidentsIndex","i","addIncidentToIndex","updateIncidentInIndex","index","incident","resetIncidentStore","useIncident","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","resetActionsInSuccess","processActionSuccess","useUi","storeToRefs","incidentActions","incidentReportData","rsp","page","incidentId","incidentData"],"mappings":"oJAIa,MAAAA,EAAmBC,EAAY,WAAY,IAAM,CACtD,MAAAC,EAAiBC,EAAiB,CAAA,CAAE,EAE1C,SAASC,EAAkBC,EAAgB,CACzCH,EAAe,MAAQG,CACzB,CAEA,SAASC,EAAmBD,EAAc,CACzBH,EAAA,MAAM,KAAKG,CAAC,CAC7B,CAEA,SAASE,EAAsBF,EAAc,CACrC,MAAAG,EAAQN,EAAe,MAAM,UAAWO,GAAaA,EAAS,KAAOJ,EAAE,EAAE,EAChEH,EAAA,MAAMM,CAAK,EAAIH,CAChC,CAEA,SAASK,GAAqB,CAC5BR,EAAe,MAAQ,EACzB,CAEO,MAAA,CACL,kBAAAE,EACA,eAAAF,EACA,mBAAAI,EACA,sBAAAC,EACA,mBAAAG,CAAA,CAEJ,CAAC,ECzBM,SAASC,GAAc,CACtB,KAAA,CAAE,UAAAC,GAAcC,IAChB,CACJ,uBAAAC,EACA,4BAAAC,EACA,mBAAAC,EACA,oBAAAC,EACA,sBAAAC,EACA,qBAAAC,GACEC,EAAM,EACJ,CACJ,kBAAAhB,EACA,mBAAAM,EACA,mBAAAJ,EACA,sBAAAC,GACEP,EAAiB,EACf,CAAE,eAAAE,CAAmB,EAAAmB,EAAYrB,EAAkB,CAAA,EAEnDsB,EAAkB,CACtB,eAAgB,CACd,GAAI,iBACJ,eAAgB,iCAChB,aAAc,4CAChB,EACA,gBAAiB,CACf,GAAI,kBACJ,eAAgB,oCAChB,aAAc,+CAChB,EACA,gBAAiB,CACf,GAAI,kBACJ,eAAgB,mCAChB,aAAc,8CAChB,EACA,aAAc,CACZ,GAAI,eACJ,eAAgB,iCAChB,aAAc,4CAChB,CAAA,EAgFK,MAAA,CACL,eA9EqB,MAAOC,GAAgC,CAKxCN,IACEC,IACtBJ,EAAuBQ,EAAgB,cAAc,EAEjD,GAAA,CACF,MAAME,EAAM,MAAMZ,EAAU,KAAK,gBAAiBW,CAAkB,EACjDjB,EAAAkB,EAAI,KAAK,SAAS,EACrCL,EAAqBG,EAAgB,cAAc,QAE9C,EAAY,CACjB,QAAQ,IAAI,CAAC,EACMN,EAAAM,EAAgB,eAAgB,CAAC,CACtD,CAAA,EA8DA,4BA3DkC,MAAOG,GAAiB,CACtCR,IACpBH,EAAuBQ,EAAgB,eAAe,EAElD,GAAA,CACF,MAAME,EAAM,MAAMZ,EAAU,IAAI,uBAAuBa,CAAI,EAAE,EAC3C,OAAArB,EAAAoB,EAAI,KAAK,SAAS,EACpCT,EAA4BO,EAAgB,eAAe,EACpDE,EAAI,WAEN,EAAY,CACjB,QAAQ,IAAI,CAAC,EACMR,EAAAM,EAAgB,gBAAiB,CAAC,CACvD,CAAA,EA+CA,yBA5C+B,IACxBpB,EAAe,MA4CtB,gBAAAoB,EACA,mBAAAZ,EACA,gBA3CsB,MAAOgB,GAAuB,CAChCT,IACpBH,EAAuBQ,EAAgB,eAAe,EAElD,GAAA,CACF,MAAME,EAAM,MAAMZ,EAAU,IAAI,iBAAiBc,CAAU,EAAE,EAC7D,OAAAX,EAA4BO,EAAgB,eAAe,EACpDE,EAAI,KAAK,eAEX,EAAY,CACjB,QAAQ,IAAI,CAAC,EACMR,EAAAM,EAAgB,gBAAiB,CAAC,CACvD,CAAA,EAgCA,aA3BmB,MAAOK,GAAsB,CAK5BV,IACEC,IACtBJ,EAAuBQ,EAAgB,YAAY,EAE/C,GAAA,CACI,MAAAE,EAAM,MAAMZ,EAAU,IAAI,iBAAiBe,EAAa,EAAE,GAAIA,CAAY,EAC1DpB,EAAAiB,EAAI,KAAK,SAAS,EACxCL,EAAqBG,EAAgB,YAAY,QAE5C,EAAQ,CACb,QAAQ,IAAI,CAAC,EACMN,EAAAM,EAAgB,aAAc,CAAC,CACpD,CAAA,CAUA,CAEJ"}
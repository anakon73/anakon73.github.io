{"version":3,"file":"Edit-ts1eHKZu.js","sources":["../../src/pages/training/Edit.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { onMounted, ref, toRefs, watch } from 'vue'\nimport { storeToRefs } from 'pinia'\nimport RightDrawer from '@/shared/ui/layout/RightDrawer.vue'\nimport { useUi } from '@/shared/lib/composables/useUi'\nimport IconClose from '@/shared/ui/icons/IconClose.vue'\nimport ProgressSpinner from '@/shared/ui/ProgressSpinner.vue'\nimport ActionSuccessAlert from '@/shared/ui/forms/ActionSuccessAlert.vue'\nimport ActionErrorAlert from '@/shared/ui/forms/ActionErrorAlert.vue'\nimport { useTraining } from '@/shared/api/useTraining'\nimport type { IAbility } from '@/shared/types/abilities/IAbility'\nimport VTrainingCategorySelect from '@/shared/ui/inputs/VTrainingCategorySelect.vue'\nimport type { EditTrainingDTO } from '@/shared/types/training/TrainingDTOs'\nimport type { ITraining } from '@/shared/types/training/ITraining'\nimport VDepartmentSelect from '@/shared/ui/inputs/VDepartmentSelect.vue'\nimport { useAbility } from '@/shared/api/abilities/useAbility'\nimport { useUiStore } from '@/shared/lib/composables/ui'\nimport { useTrainingStore } from '@/shared/api/stores/training'\nimport { AppPermissions } from '@/shared/types/enums/permissions/permissions'\n\nconst props = defineProps<{ trainingId: number }>()\nconst { trainingId } = toRefs(props)\n\nconst { validateForm, actionIsInProgress, actionIsInError, actionIsInSuccess } = useUi()\nconst editTrainingFormElement = ref<HTMLFormElement | null>(null)\nconst { getTrainingById, trainingActions, editTraining } = useTraining()\nconst { apiGetAbilitiesByDepartments } = useAbility()\n\nconst { storeFilterState } = storeToRefs(useUiStore())\nconst { storeUpdateTraining, storeRemoveTraining } = useTrainingStore()\n\nconst editTrainingDTO = ref<EditTrainingDTO | null>(null)\nconst allAbilities = ref<IAbility[]>([])\n\nonMounted(async () => {\n  const training = await getTrainingById(trainingId.value.toString())\n\n  if (training) {\n    editTrainingDTO.value = training\n    const rsp = await apiGetAbilitiesByDepartments([training.department])\n    if (rsp) {\n      allAbilities.value = rsp.data.abilities\n    }\n  }\n})\n\nwatch(\n  trainingId,\n  async (newId) => {\n    if (newId) {\n      const training = await getTrainingById(newId.toString())\n      if (training) {\n        editTrainingDTO.value = training\n        const rsp = await apiGetAbilitiesByDepartments([training.department])\n        if (rsp) {\n          allAbilities.value = rsp.data.abilities\n        }\n      }\n    }\n  },\n)\n\nconst initialLoad = ref(true)\nwatch (\n  () => editTrainingDTO.value?.department.id,\n  async (newDepartmentId) => {\n    if (newDepartmentId && editTrainingDTO.value && !initialLoad.value) {\n      const rsp = await apiGetAbilitiesByDepartments([\n        editTrainingDTO.value.department,\n      ])\n      if (rsp) {\n        allAbilities.value = rsp.data.abilities\n      }\n      editTrainingDTO.value.requiredAbilities = []\n    }\n    else {\n      initialLoad.value = false\n    }\n  },\n)\n\nconst handleEditTraining = async () => {\n  const training = await validateForm<ITraining>(\n    editTrainingFormElement.value,\n    () => {\n      if (editTrainingDTO.value) {\n        editTraining(editTrainingDTO.value)\n      }\n    },\n  )\n  if (training) {\n    editTrainingDTO.value = training\n\n    if (training.department.id === storeFilterState.value.selectedDepartment?.id) {\n      storeUpdateTraining(training)\n    }\n    else {\n      storeRemoveTraining(training)\n    }\n  }\n}\n\nconst toggleRequiredAbility = (ability: IAbility) => {\n  const abilityIndex = editTrainingDTO.value!.requiredAbilities.findIndex((a: IAbility) => a.id === ability.id)\n  if (abilityIndex === -1) {\n    editTrainingDTO.value!.requiredAbilities.push(ability)\n  }\n  else {\n    editTrainingDTO.value!.requiredAbilities.splice(abilityIndex, 1)\n  }\n}\n</script>\n\n<template>\n  <RightDrawer>\n    <div class=\"isolate flex flex-col items-center justify-center border-l bg-white pb-6\">\n      <div class=\"sticky top-0 z-10 flex w-full items-center justify-end bg-white p-6\">\n        <ProgressSpinner\n          v-if=\"actionIsInProgress(trainingActions.getTrainingById)\n            || actionIsInProgress(trainingActions.editTraining)\"\n          class=\"h-5 w-5 text-blue-500\"\n        />\n        <RouterLink\n          v-else\n          :to=\"{ name: $Routes.Training }\"\n        >\n          <IconClose class=\"h-5 w-5 fill-red-400\" />\n        </RouterLink>\n      </div>\n      <form\n        id=\"edit_training_form\"\n        ref=\"editTrainingFormElement\"\n        class=\"w-full space-y-8 divide-y divide-gray-200 px-6 md:px-12\"\n      >\n        <div class=\"mb-6\">\n          <h3 class=\"text-base font-semibold leading-6 text-gray-900\">\n            View/Edit Training.\n          </h3>\n          <p class=\"mt-1 text-sm text-gray-500\">\n            Use the form below to update this training.\n          </p>\n        </div>\n\n        <template v-if=\"editTrainingDTO\">\n          <div class=\"grid grid-cols-1 gap-x-4 gap-y-6 pt-6\">\n            <div>\n              <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n                Department\n              </p>\n              <VDepartmentSelect\n                v-model=\"editTrainingDTO.department\"\n                :department-permissions-required=\"[\n                  AppPermissions.MANAGE_TRAINING,\n                ]\"\n              />\n            </div>\n\n            <div>\n              <label for=\"training_name\" class=\"block text-sm font-medium text-gray-700\">\n                Training Name\n              </label>\n              <div class=\"mt-1\">\n                <input\n                  id=\"training_name\"\n                  v-model=\"editTrainingDTO.name\"\n                  type=\"text\"\n                  class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  required\n                >\n              </div>\n            </div>\n\n            <div class=\"grid grid-cols-3 gap-4\">\n              <div>\n                <p class=\"mb-1 block text-sm font-medium text-gray-700\">\n                  Training Category\n                </p>\n                <VTrainingCategorySelect v-model=\"editTrainingDTO.category.id\" />\n              </div>\n              <div>\n                <label for=\"requiresFeedback\" class=\"block text-sm font-medium text-gray-700\">\n                  Requires Feedback\n                </label>\n                <div class=\"mt-1\">\n                  <select\n                    id=\"requiresFeedback\"\n                    v-model=\"editTrainingDTO.requiresFeedback\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  >\n                    <option :value=\"1\">\n                      Yes\n                    </option>\n                    <option :value=\"0\">\n                      No\n                    </option>\n                  </select>\n                </div>\n              </div>\n              <div>\n                <label for=\"mandatory\" class=\"block text-sm font-medium text-gray-700\">\n                  Mandatory\n                </label>\n                <div class=\"mt-1\">\n                  <select\n                    id=\"mandatory\"\n                    v-model=\"editTrainingDTO.mandatory\"\n                    class=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                  >\n                    <option :value=\"1\">\n                      Yes\n                    </option>\n                    <option :value=\"0\">\n                      No\n                    </option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"pt-8\">\n            <label\n              for=\"departure_date_and_time\"\n              class=\"block text-sm font-medium text-gray-700\"\n            >\n              Required Abilities\n            </label>\n\n            <p class=\"mt-1 text-sm text-gray-500\">\n              In order to create logs for this training, staff must have the abilities listed below. Logs for this training are also visible only to users with any of these abilities (or the staff to whom the log belongs).\n            </p>\n\n            <div class=\"mt-6\">\n              <fieldset>\n                <div class=\"space-y-4\">\n                  <div class=\"grid grid-cols-1 gap-3 md:grid-cols-2\">\n                    <div\n                      v-for=\"ability in allAbilities\"\n                      :key=\"ability.id\"\n                      class=\"relative flex items-start\"\n                    >\n                      <div class=\"flex h-5 items-center\">\n                        <input\n                          :id=\"`required_${ability.slug}`\"\n                          :checked=\"editTrainingDTO.requiredAbilities.find(a => a.slug === ability.slug) !== undefined\"\n                          type=\"checkbox\"\n                          class=\"h-4 w-4 cursor-pointer rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                          @change=\"toggleRequiredAbility(ability)\"\n                        >\n                      </div>\n                      <div class=\"ml-3 flex items-center space-x-1 text-sm\">\n                        <div class=\"flex h-5 w-5 items-center justify-center\">\n                          <img\n                            :src=\"ability.iconUrl\"\n                            alt=\"Ability icon.\"\n                          >\n                        </div>\n                        <label\n                          :for=\"`required_${ability.slug}`\"\n                          class=\"cursor-pointer font-medium text-gray-700\"\n                        >\n                          {{ ability.name }}\n                        </label>\n                        <p class=\"text-gray-500\">\n                          {{ ability.description }}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </fieldset>\n            </div>\n          </div>\n\n          <div\n\n            class=\"relative pt-5\"\n          >\n            <div class=\"flex items-center justify-end\">\n              <Transition name=\"alert\">\n                <ActionSuccessAlert\n                  v-if=\"actionIsInSuccess(trainingActions.editTraining)\"\n                  :action=\"trainingActions.editTraining\"\n                />\n              </Transition>\n              <Transition name=\"alert\">\n                <ActionErrorAlert\n                  v-if=\"actionIsInError(trainingActions.editTraining)\"\n                  :action=\"trainingActions.editTraining\"\n                />\n              </Transition>\n              <div class=\"flex items-center\">\n                <button\n                  class=\"ml-3 inline-flex h-9 items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm focus:outline-none hover:bg-blue-700\"\n                  @click.prevent=\"handleEditTraining\"\n                >\n                  <span v-if=\"!actionIsInProgress(trainingActions.editTraining)\">\n                    Apply Changes\n                  </span>\n                  <ProgressSpinner\n                    v-else\n                    class=\"h-3 w-3 text-white\"\n                  />\n                </button>\n              </div>\n            </div>\n          </div>\n        </template>\n      </form>\n    </div>\n  </RightDrawer>\n</template>\n"],"names":["props","__props","trainingId","toRefs","validateForm","actionIsInProgress","actionIsInError","actionIsInSuccess","useUi","editTrainingFormElement","ref","getTrainingById","trainingActions","editTraining","useTraining","apiGetAbilitiesByDepartments","useAbility","storeFilterState","storeToRefs","useUiStore","storeUpdateTraining","storeRemoveTraining","useTrainingStore","editTrainingDTO","allAbilities","onMounted","training","rsp","watch","newId","initialLoad","_a","newDepartmentId","handleEditTraining","toggleRequiredAbility","ability","abilityIndex","a"],"mappings":"6mKAoBA,MAAMA,EAAQC,EACR,CAAE,WAAAC,CAAA,EAAeC,EAAOH,CAAK,EAE7B,CAAE,aAAAI,EAAc,mBAAAC,EAAoB,gBAAAC,EAAiB,kBAAAC,CAAA,EAAsBC,IAC3EC,EAA0BC,EAA4B,IAAI,EAC1D,CAAE,gBAAAC,EAAiB,gBAAAC,EAAiB,aAAAC,GAAiBC,GAAY,EACjE,CAAE,6BAAAC,GAAiCC,KAEnC,CAAE,iBAAAC,CAAqB,EAAAC,EAAYC,EAAY,CAAA,EAC/C,CAAE,oBAAAC,EAAqB,oBAAAC,CAAoB,EAAIC,GAAiB,EAEhEC,EAAkBb,EAA4B,IAAI,EAClDc,EAAed,EAAgB,CAAA,CAAE,EAEvCe,EAAU,SAAY,CACpB,MAAMC,EAAW,MAAMf,EAAgBT,EAAW,MAAM,UAAU,EAElE,GAAIwB,EAAU,CACZH,EAAgB,MAAQG,EACxB,MAAMC,EAAM,MAAMZ,EAA6B,CAACW,EAAS,UAAU,CAAC,EAChEC,IACWH,EAAA,MAAQG,EAAI,KAAK,UAElC,CAAA,CACD,EAEDC,EACE1B,EACA,MAAO2B,GAAU,CACf,GAAIA,EAAO,CACT,MAAMH,EAAW,MAAMf,EAAgBkB,EAAM,SAAU,CAAA,EACvD,GAAIH,EAAU,CACZH,EAAgB,MAAQG,EACxB,MAAMC,EAAM,MAAMZ,EAA6B,CAACW,EAAS,UAAU,CAAC,EAChEC,IACWH,EAAA,MAAQG,EAAI,KAAK,UAElC,CACF,CACF,CAAA,EAGI,MAAAG,EAAcpB,EAAI,EAAI,EAC5BkB,EACE,WAAM,OAAAG,EAAAR,EAAgB,QAAhB,YAAAQ,EAAuB,WAAW,IACxC,MAAOC,GAAoB,CACzB,GAAIA,GAAmBT,EAAgB,OAAS,CAACO,EAAY,MAAO,CAC5D,MAAAH,EAAM,MAAMZ,EAA6B,CAC7CQ,EAAgB,MAAM,UAAA,CACvB,EACGI,IACWH,EAAA,MAAQG,EAAI,KAAK,WAEhBJ,EAAA,MAAM,kBAAoB,EAAC,MAG3CO,EAAY,MAAQ,EAExB,CAAA,EAGF,MAAMG,EAAqB,SAAY,OACrC,MAAMP,EAAW,MAAMtB,EACrBK,EAAwB,MACxB,IAAM,CACAc,EAAgB,OAClBV,EAAaU,EAAgB,KAAK,CAEtC,CAAA,EAEEG,IACFH,EAAgB,MAAQG,EAEpBA,EAAS,WAAW,OAAOK,EAAAd,EAAiB,MAAM,qBAAvB,YAAAc,EAA2C,IACxEX,EAAoBM,CAAQ,EAG5BL,EAAoBK,CAAQ,EAEhC,EAGIQ,EAAyBC,GAAsB,CAC7C,MAAAC,EAAeb,EAAgB,MAAO,kBAAkB,UAAWc,GAAgBA,EAAE,KAAOF,EAAQ,EAAE,EACxGC,IAAiB,GACHb,EAAA,MAAO,kBAAkB,KAAKY,CAAO,EAGrDZ,EAAgB,MAAO,kBAAkB,OAAOa,EAAc,CAAC,CACjE"}
{"version":3,"file":"mock-UR5nntqf.js","sources":["../../src/shared/api/vehicle/mock.ts"],"sourcesContent":["import type { z } from 'zod'\nimport { faker as f } from '@faker-js/faker'\nimport { HttpResponse, http } from 'msw'\n\nimport type { Vehicle } from '@/shared/types'\nimport { makeArrayMock } from '@/shared/lib/utils'\n\nimport { type Handlers, mockUrl } from '../lib'\nimport type { VehicleSchema } from '../schemas'\n\nimport { normalizeVehicle } from './normalizers'\nimport { endpoints } from './api'\n\nexport function makeVehicleSchemaMock(): z.infer<typeof VehicleSchema> {\n  return {\n    id: f.number.int() as Vehicle['id'],\n    title: f.vehicle.model(),\n    registrationNumber: f.vehicle.vrm(),\n    maxCapacity: f.number.int() as number,\n  }\n}\n\nexport const makeVehicleMock = () => normalizeVehicle(makeVehicleSchemaMock())\n\nexport const vehicleHandlers: Handlers<typeof endpoints, 'Vehicle'> = {\n  VehicleGetAll: (() => {\n    const { url, method, schema } = endpoints.getAll\n\n    return http[method](\n      mockUrl(url),\n      () => HttpResponse.json<z.infer<typeof schema>>(\n        {\n          data: makeArrayMock(makeVehicleSchemaMock, 5).map(\n            (u, idx) => ({ ...u, id: (idx + 1) as Vehicle['id'] }),\n          ),\n          meta: { current_page: 1, last_page: 1 },\n        },\n      ),\n    )\n  })(),\n}\n"],"names":["makeVehicleSchemaMock","f","makeVehicleMock","normalizeVehicle","vehicleHandlers","url","method","schema","endpoints","http","mockUrl","HttpResponse","makeArrayMock","u","idx"],"mappings":"sNAaO,SAASA,GAAuD,CAC9D,MAAA,CACL,GAAIC,EAAE,OAAO,IAAI,EACjB,MAAOA,EAAE,QAAQ,MAAM,EACvB,mBAAoBA,EAAE,QAAQ,IAAI,EAClC,YAAaA,EAAE,OAAO,IAAI,CAAA,CAE9B,CAEO,MAAMC,EAAkB,IAAMC,EAAiBH,GAAuB,EAEhEI,EAAyD,CACpE,eAAgB,IAAM,CACpB,KAAM,CAAE,IAAAC,EAAK,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,EAAU,OAE1C,OAAOC,EAAKH,CAAM,EAChBI,EAAQL,CAAG,EACX,IAAMM,EAAa,KACjB,CACE,KAAMC,EAAcZ,EAAuB,CAAC,EAAE,IAC5C,CAACa,EAAGC,KAAS,CAAE,GAAGD,EAAG,GAAKC,EAAM,GAClC,EACA,KAAM,CAAE,aAAc,EAAG,UAAW,CAAE,CACxC,CACF,CAAA,CACF,GACC,CACL"}
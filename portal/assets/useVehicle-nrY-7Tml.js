import{d as v,s as f}from"./schemas-74JEr9Jm.js";import{j as E}from"./vue.esm-bundler-CYPfFjdk.js";import{u as A,a as I}from"./preview-D0Pi-YKn.js";const T=v("vehicle",()=>{const e=E([]);function h(r){e.value=r}function d(r){e.value.push(r)}function u(r){const l=e.value.findIndex(t=>t.id===r.id);l!==-1&&e.value.splice(l,1)}function p(r){const l=e.value.findIndex(t=>t.id===r.id);e.value[l]=r}function V(){e.value=[]}return{storeVehicles:e,storeSetVehicles:h,storeAddVehicleToIndex:d,storeUpdateVehicleInIndex:p,storeClearAllVehicles:V,storeRemoveVehicleFromIndex:u}});var a=(e=>(e.GET="GET",e.POST="POST",e.PUT="PUT",e.PATCH="PATCH",e.DELETE="DELETE",e.HEAD="HEAD",e.OPTIONS="OPTIONS",e))(a||{});const m=()=>{const{apiClient:e}=A(),{addToActionsInProgress:h,removeFromActionsInProgress:d,processActionError:u,addToActionsInSuccess:p}=I(),V=({method:l,url:t,data:o,config:i})=>{switch(l){case a.GET:return e.get(t,i);case a.POST:return e.post(t,o,i);case a.PUT:return e.put(t,o,i);case a.PATCH:return e.patch(t,o,i);case a.DELETE:return e.delete(t,i);case a.HEAD:return e.head(t,i);case a.OPTIONS:return e.options(t,i);default:throw new Error("API client method does not exist.")}};return{apiRequest:async({method:l,url:t,data:o,config:i,actions:c})=>{c!=null&&c.length&&c.forEach(s=>h(s));try{const s=await V({method:l,url:t,data:o,config:i});return s&&c!=null&&c.length&&(c.forEach(n=>d(n)),c.forEach(n=>p(n))),s}catch(s){return c&&c.forEach(n=>{u(n,s)}),s}}}};function S(){const{apiRequest:e}=m(),{storeVehicles:h}=f(T()),{storeSetVehicles:d,storeAddVehicleToIndex:u,storeUpdateVehicleInIndex:p,storeClearAllVehicles:V}=T(),r={getVehicleById:{id:"getVehicleById",successMessage:"Successfully loaded vehicle.",errorMessage:"There was an error loading vehicle."},getAllVehicles:{id:"getAllVehicles",successMessage:"Successfully loaded vehicles.",errorMessage:"There was an error loading vehicles."},createVehicle:{id:"createVehicle",successMessage:"Successfully created vehicle.",errorMessage:"There was an error creating vehicle."},editVehicle:{id:"editVehicle",successMessage:"Successfully updated the vehicle.",errorMessage:"There was an error updating vehicle."}};return{vehicleActions:r,storeSetVehicles:d,storeAddVehicleToIndex:u,storeUpdateVehicleInIndex:p,storeClearAllVehicles:V,storeGetVehicles:()=>h.value,apiGetVehicle:async s=>await e({method:a.GET,url:`api/vehicle/${s.id}`,actions:[r.getVehicleById]}),apiGetVehicles:async s=>{const n=s.selectedDepartment===null?"all":s.selectedDepartment.id;return await e({method:a.GET,url:"api/vehicles",actions:[r.getAllVehicles],config:{params:{paginate:!1,selectedDepartmentId:n,sortBy:s.sortBy,orderBy:s.orderBy}}})},apiCreateVehicle:async s=>await e({method:a.POST,url:"api/vehicle",data:s,actions:[r.createVehicle]}),apiUpdateVehicle:async s=>await e({method:a.PUT,url:`api/vehicle/${s.id}`,data:s,actions:[r.editVehicle]})}}export{a as H,S as a,T as b,m as u};

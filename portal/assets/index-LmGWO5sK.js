const f=t=>Object.prototype.toString.call(t);function i(t){if(t===null)return"null";const e=f(t).slice(8,-1).toLowerCase();return typeof t=="object"||typeof t=="function"?e:typeof t}function c(t,e){const n=i(t),r=i(e);if(n!==r)return!1;if(n==="array")return t.length!==e.length?!1:t.every((o,s)=>c(o,e[s]));if(n==="object"){const o=Object.keys(t);return o.length!==Object.keys(e).length?!1:o.every(s=>c(t[s],e[s]))}return Object.is(t,e)}function u(t){return t!=null}const p=t=>typeof t=="number";function l(t,e){return Object.fromEntries(Object.entries(t).map(([n,r])=>e(n,r)).filter(u))}function y(t,e,n=!1){return e.reduce((r,o)=>(o in t&&(!n||t[o]!==void 0)&&(r[o]=t[o]),r),{})}function a(t,e="This value was promised to be there."){if(t==null)throw new TypeError(e);return t}const b=t=>l(t,(e,n)=>[e,a(n)]),h=(t,e=1,n=null)=>Array.from({length:n!==null?Math.floor(Math.random()*(e-n+1))+n:e}).map(t);function d(t,...e){const n={};let r;for(r in t)e.includes(r)||(n[r]=t[r]);return n}function j(t,e){return t.includes(e)}const g=t=>t.replace(/[^+\d]+/g,"");export{c as a,d as b,b as c,p as d,a as e,j as i,h as m,u as n,y as o,g as s};

{"version":3,"file":"useExperience-j1XTukVo.js","sources":["../../src/shared/api/stores/experience.ts","../../src/shared/api/useExperience.ts"],"sourcesContent":["import { ref } from 'vue'\nimport { defineStore } from 'pinia'\nimport type { IExperience } from '@/shared/types/experiences/IExperience'\n\nexport const useExperiencesStore = defineStore('experiences', () => {\n  const storeExperiences = ref<IExperience[]>([])\n\n  function storeSetExperiences(experiences: IExperience[]) {\n    storeExperiences.value = experiences\n  }\n\n  function storeAddExperience(experience: IExperience) {\n    storeExperiences.value.push(experience)\n  }\n\n  function storeRemoveExperience(experience: IExperience) {\n    const i = storeExperiences.value.findIndex(\n      (existingExperiences) => existingExperiences.id === experience.id,\n    )\n    storeExperiences.value.splice(i, 1)\n  }\n\n  function storeUpdateExperience(experience: IExperience) {\n    const i = storeExperiences.value.findIndex(\n      (existingExperience) => existingExperience.id === experience.id,\n    )\n    storeExperiences.value[i] = experience\n  }\n\n  function storeClearExperiences() {\n    storeExperiences.value = []\n  }\n\n  return {\n    storeExperiences,\n    storeSetExperiences,\n    storeAddExperience,\n    storeRemoveExperience,\n    storeUpdateExperience,\n    storeClearExperiences,\n  }\n})\n","import { useUi } from '@/shared/lib/composables/useUi'\nimport type { IAction } from '@/shared/types/api/IAction'\nimport { useApiClient } from '@/shared/api/useApiClient'\nimport { useExperiencesStore } from '@/shared/api/stores/experience'\nimport type { IDepartment } from '@/shared/types/departments/IDepartments'\nimport type { CreateExperienceDTO, EditExperienceDTO } from '@/shared/types/experiences/ExperienceDTOs'\nimport type { IExperience } from '@/shared/types/experiences/IExperience'\n\nexport function useExperience() {\n  const { apiClient } = useApiClient()\n  const {\n    addToActionsInProgress,\n    removeFromActionsInProgress,\n    processActionError,\n    resetActionsInError,\n    processActionSuccess,\n    resetActionsInSuccess,\n  } = useUi()\n\n  const {\n    storeClearExperiences,\n    storeUpdateExperience,\n  } = useExperiencesStore()\n\n  const experienceActions = {\n    getAllExperiences: {\n      id: 'getAllExperiences',\n      successMessage: 'Experiences retrieved successfully.',\n      errorMessage: 'Failed to retrieve experiences.',\n    } as IAction,\n    createExperience: {\n      id: 'createExperience',\n      successMessage: 'Experience created successfully.',\n      errorMessage: 'Failed to create experience.',\n    } as IAction,\n    getExperienceById: {\n      id: 'getExperienceById',\n      successMessage: 'Experience retrieved successfully.',\n      errorMessage: 'Failed to retrieve experience.',\n    } as IAction,\n    editExperience: {\n      id: 'editExperience',\n      successMessage: 'Experience edited successfully.',\n      errorMessage: 'Failed to edit experience.',\n    },\n  }\n\n  const apiGetExperiences = async (selectedDepartment: IDepartment) => {\n    resetActionsInError()\n    addToActionsInProgress(experienceActions.getAllExperiences)\n\n    try {\n      const rsp = await apiClient.get('/api/experiences', {\n        params: {\n          department_id: selectedDepartment.id,\n        },\n      })\n      removeFromActionsInProgress(experienceActions.getAllExperiences)\n      return rsp.data.experiences\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(experienceActions.getAllExperiences, e)\n    }\n  }\n\n  const createExperience = async (experienceData: CreateExperienceDTO): Promise<IExperience | void> => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(experienceActions.createExperience)\n\n    try {\n      const rsp = await apiClient.post('/api/experiences', experienceData)\n      processActionSuccess(experienceActions.createExperience)\n      return rsp.data.experience\n    }\n    catch (e: any) {\n      console.log(e)\n      processActionError(experienceActions.createExperience, e)\n    }\n  }\n\n  const getExperienceById = async (experienceId: string) => {\n    resetActionsInError()\n    addToActionsInProgress(experienceActions.getExperienceById)\n\n    try {\n      const rsp = await apiClient.get(`/api/experiences/${experienceId}`)\n      removeFromActionsInProgress(experienceActions.getExperienceById)\n      return rsp.data.experience\n    }\n    catch (e: any) {\n      processActionError(experienceActions.getExperienceById, e)\n    }\n  }\n\n  const editExperience = async (experienceData: EditExperienceDTO | null) => {\n    resetActionsInError()\n    resetActionsInSuccess()\n    addToActionsInProgress(experienceActions.editExperience)\n\n    try {\n      const rsp = await apiClient.put(`/api/experiences/${experienceData!.id}`, {\n        experienceData,\n      })\n      storeUpdateExperience(rsp.data.experience)\n      processActionSuccess(experienceActions.editExperience)\n      return rsp.data.experience\n    }\n    catch (e: any) {\n      processActionError(experienceActions.editExperience, e)\n    }\n  }\n\n  return {\n    experienceActions,\n    apiGetExperiences,\n    storeClearExperiences,\n    createExperience,\n    getExperienceById,\n    editExperience,\n  }\n}\n"],"names":["useExperiencesStore","defineStore","storeExperiences","ref","storeSetExperiences","experiences","storeAddExperience","experience","storeRemoveExperience","i","existingExperiences","storeUpdateExperience","existingExperience","storeClearExperiences","useExperience","apiClient","useApiClient","addToActionsInProgress","removeFromActionsInProgress","processActionError","resetActionsInError","processActionSuccess","resetActionsInSuccess","useUi","experienceActions","selectedDepartment","rsp","experienceData","experienceId"],"mappings":"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"}